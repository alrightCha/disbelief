import { PublicKey, Transaction, Keypair, Connection, Commitment, TransactionInstruction, GetProgramAccountsFilter } from '@solana/web3.js';
import { BN, IdlAccounts, Accounts, IdlTypes, Program, ProgramAccount } from '@coral-xyz/anchor';
import BN$1 from 'bn.js';
import Decimal from 'decimal.js';

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/dynamic_bonding_curve.json`.
 */
type DynamicBondingCurve = {
    address: 'dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN';
    metadata: {
        name: 'dynamicBondingCurve';
        version: '0.1.0';
        spec: '0.1.0';
        description: 'Created with Anchor';
    };
    instructions: [
        {
            name: 'claimCreatorTradingFee';
            discriminator: [82, 220, 250, 189, 3, 85, 107, 45];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The treasury token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The treasury token b account'];
                    writable: true;
                },
                {
                    name: 'baseVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'baseMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of token b'];
                },
                {
                    name: 'creator';
                    signer: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBaseProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'maxBaseAmount';
                    type: 'u64';
                },
                {
                    name: 'maxQuoteAmount';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'claimProtocolFee';
            discriminator: [165, 228, 133, 48, 99, 249, 255, 33];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['pool'];
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'baseVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'baseMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of token b'];
                    relations: ['config'];
                },
                {
                    name: 'tokenBaseAccount';
                    docs: ['The treasury token a account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    48,
                                    9,
                                    89,
                                    123,
                                    106,
                                    114,
                                    131,
                                    251,
                                    50,
                                    173,
                                    254,
                                    250,
                                    10,
                                    80,
                                    160,
                                    84,
                                    143,
                                    100,
                                    81,
                                    249,
                                    134,
                                    112,
                                    30,
                                    213,
                                    50,
                                    166,
                                    239,
                                    78,
                                    53,
                                    175,
                                    188,
                                    85
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenBaseProgram';
                            },
                            {
                                kind: 'account';
                                path: 'baseMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'tokenQuoteAccount';
                    docs: ['The treasury token b account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    48,
                                    9,
                                    89,
                                    123,
                                    106,
                                    114,
                                    131,
                                    251,
                                    50,
                                    173,
                                    254,
                                    250,
                                    10,
                                    80,
                                    160,
                                    84,
                                    143,
                                    100,
                                    81,
                                    249,
                                    134,
                                    112,
                                    30,
                                    213,
                                    50,
                                    166,
                                    239,
                                    78,
                                    53,
                                    175,
                                    188,
                                    85
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenQuoteProgram';
                            },
                            {
                                kind: 'account';
                                path: 'quoteMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'claimFeeOperator';
                    docs: ['Claim fee operator'];
                },
                {
                    name: 'operator';
                    docs: ['Operator'];
                    signer: true;
                    relations: ['claimFeeOperator'];
                },
                {
                    name: 'tokenBaseProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'claimTradingFee';
            discriminator: [8, 236, 89, 49, 152, 125, 177, 81];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['pool'];
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The treasury token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The treasury token b account'];
                    writable: true;
                },
                {
                    name: 'baseVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'baseMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of token b'];
                    relations: ['config'];
                },
                {
                    name: 'feeClaimer';
                    signer: true;
                    relations: ['config'];
                },
                {
                    name: 'tokenBaseProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'maxAmountA';
                    type: 'u64';
                },
                {
                    name: 'maxAmountB';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'closeClaimFeeOperator';
            discriminator: [38, 134, 82, 216, 95, 124, 17, 99];
            accounts: [
                {
                    name: 'claimFeeOperator';
                    writable: true;
                },
                {
                    name: 'rentReceiver';
                    writable: true;
                },
                {
                    name: 'admin';
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'createClaimFeeOperator';
            docs: ['ADMIN FUNCTIONS ///'];
            discriminator: [169, 62, 207, 107, 58, 187, 162, 109];
            accounts: [
                {
                    name: 'claimFeeOperator';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    99,
                                    102,
                                    95,
                                    111,
                                    112,
                                    101,
                                    114,
                                    97,
                                    116,
                                    111,
                                    114
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'operator';
                            }
                        ];
                    };
                },
                {
                    name: 'operator';
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'createConfig';
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189];
            accounts: [
                {
                    name: 'config';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'feeClaimer';
                },
                {
                    name: 'leftoverReceiver';
                },
                {
                    name: 'quoteMint';
                    docs: ['quote mint'];
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'configParameters';
                    type: {
                        defined: {
                            name: 'configParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'createLocker';
            docs: ['PERMISSIONLESS FUNCTIONS ///', 'create locker'];
            discriminator: [167, 90, 137, 154, 75, 47, 17, 84];
            accounts: [
                {
                    name: 'virtualPool';
                    docs: ['Virtual pool'];
                    writable: true;
                },
                {
                    name: 'config';
                    docs: ['config'];
                    relations: ['virtualPool'];
                },
                {
                    name: 'poolAuthority';
                    writable: true;
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'baseVault';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'baseMint';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'base';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    98,
                                    97,
                                    115,
                                    101,
                                    95,
                                    108,
                                    111,
                                    99,
                                    107,
                                    101,
                                    114
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'virtualPool';
                            }
                        ];
                    };
                },
                {
                    name: 'creator';
                    relations: ['virtualPool'];
                },
                {
                    name: 'escrow';
                    writable: true;
                },
                {
                    name: 'escrowToken';
                    writable: true;
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'lockerProgram';
                    address: 'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn';
                },
                {
                    name: 'lockerEventAuthority';
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                }
            ];
            args: [];
        },
        {
            name: 'createPartnerMetadata';
            docs: ['PARTNER FUNCTIONS ////'];
            discriminator: [192, 168, 234, 191, 188, 226, 227, 255];
            accounts: [
                {
                    name: 'partnerMetadata';
                    docs: ['Partner metadata'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    97,
                                    114,
                                    116,
                                    110,
                                    101,
                                    114,
                                    95,
                                    109,
                                    101,
                                    116,
                                    97,
                                    100,
                                    97,
                                    116,
                                    97
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'feeClaimer';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: ['Payer of the partner metadata.'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'feeClaimer';
                    docs: ['Fee claimer for partner'];
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'metadata';
                    type: {
                        defined: {
                            name: 'createPartnerMetadataParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'createVirtualPoolMetadata';
            discriminator: [45, 97, 187, 103, 254, 109, 124, 134];
            accounts: [
                {
                    name: 'virtualPool';
                    writable: true;
                },
                {
                    name: 'virtualPoolMetadata';
                    docs: ['Virtual pool metadata'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    118,
                                    105,
                                    114,
                                    116,
                                    117,
                                    97,
                                    108,
                                    95,
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    109,
                                    101,
                                    116,
                                    97,
                                    100,
                                    97,
                                    116,
                                    97
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'virtualPool';
                            }
                        ];
                    };
                },
                {
                    name: 'creator';
                    signer: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'payer';
                    docs: ['Payer of the virtual pool metadata.'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'metadata';
                    type: {
                        defined: {
                            name: 'createVirtualPoolMetadataParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'creatorWithdrawSurplus';
            discriminator: [165, 3, 137, 7, 28, 134, 76, 80];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'virtualPool';
                    writable: true;
                },
                {
                    name: 'tokenQuoteAccount';
                    docs: ['The receiver token account'];
                    writable: true;
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of quote token'];
                    relations: ['config'];
                },
                {
                    name: 'creator';
                    signer: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'initializeVirtualPoolWithSplToken';
            docs: ['POOL CREATOR FUNCTIONS ////'];
            discriminator: [140, 85, 215, 176, 102, 54, 104, 79];
            accounts: [
                {
                    name: 'config';
                    docs: ['Which config the pool belongs to.'];
                },
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'creator';
                    signer: true;
                },
                {
                    name: 'baseMint';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'quoteMint';
                    relations: ['config'];
                },
                {
                    name: 'pool';
                    docs: ['Initialize an account to store the pool state'];
                    writable: true;
                },
                {
                    name: 'baseVault';
                    docs: ['Token a vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'baseMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'quoteVault';
                    docs: ['Token b vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'quoteMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'mintMetadata';
                    writable: true;
                },
                {
                    name: 'metadataProgram';
                    address: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s';
                },
                {
                    name: 'payer';
                    docs: ['Address paying to create the pool. Can be anyone'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'tokenProgram';
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'initializePoolParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'initializeVirtualPoolWithToken2022';
            discriminator: [169, 118, 51, 78, 145, 110, 220, 155];
            accounts: [
                {
                    name: 'config';
                    docs: ['Which config the pool belongs to.'];
                },
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'creator';
                    signer: true;
                },
                {
                    name: 'baseMint';
                    docs: ['Unique token mint address, initialize in contract'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'quoteMint';
                    relations: ['config'];
                },
                {
                    name: 'pool';
                    docs: ['Initialize an account to store the pool state'];
                    writable: true;
                },
                {
                    name: 'baseVault';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'baseMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'quoteVault';
                    docs: ['Token quote vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'quoteMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: ['Address paying to create the pool. Can be anyone'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'tokenProgram';
                    docs: ['token program for base mint'];
                    address: 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'initializePoolParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'migrateMeteoraDamm';
            discriminator: [27, 1, 48, 22, 180, 63, 118, 217];
            accounts: [
                {
                    name: 'virtualPool';
                    docs: ['virtual pool'];
                    writable: true;
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'migrationMetadata';
                    writable: true;
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'poolAuthority';
                    writable: true;
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'dammConfig';
                    docs: ['pool config'];
                },
                {
                    name: 'lpMint';
                    writable: true;
                },
                {
                    name: 'tokenAMint';
                    writable: true;
                },
                {
                    name: 'tokenBMint';
                },
                {
                    name: 'aVault';
                    writable: true;
                },
                {
                    name: 'bVault';
                    writable: true;
                },
                {
                    name: 'aTokenVault';
                    writable: true;
                },
                {
                    name: 'bTokenVault';
                    writable: true;
                },
                {
                    name: 'aVaultLpMint';
                    writable: true;
                },
                {
                    name: 'bVaultLpMint';
                    writable: true;
                },
                {
                    name: 'aVaultLp';
                    writable: true;
                },
                {
                    name: 'bVaultLp';
                    writable: true;
                },
                {
                    name: 'baseVault';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'quoteVault';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'virtualPoolLp';
                    writable: true;
                },
                {
                    name: 'protocolTokenAFee';
                    writable: true;
                },
                {
                    name: 'protocolTokenBFee';
                    writable: true;
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'rent';
                },
                {
                    name: 'mintMetadata';
                    writable: true;
                },
                {
                    name: 'metadataProgram';
                },
                {
                    name: 'ammProgram';
                    address: 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB';
                },
                {
                    name: 'vaultProgram';
                },
                {
                    name: 'tokenProgram';
                    docs: ['tokenProgram'];
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                },
                {
                    name: 'associatedTokenProgram';
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                }
            ];
            args: [];
        },
        {
            name: 'migrateMeteoraDammClaimLpToken';
            discriminator: [139, 133, 2, 30, 91, 145, 127, 154];
            accounts: [
                {
                    name: 'virtualPool';
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'migrationMetadata';
                    docs: ['migration metadata'];
                    writable: true;
                },
                {
                    name: 'poolAuthority';
                    writable: true;
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'lpMint';
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'sourceToken';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'poolAuthority';
                            },
                            {
                                kind: 'const';
                                value: [
                                    6,
                                    221,
                                    246,
                                    225,
                                    215,
                                    101,
                                    161,
                                    147,
                                    217,
                                    203,
                                    225,
                                    70,
                                    206,
                                    235,
                                    121,
                                    172,
                                    28,
                                    180,
                                    133,
                                    237,
                                    95,
                                    91,
                                    55,
                                    145,
                                    58,
                                    140,
                                    245,
                                    133,
                                    126,
                                    255,
                                    0,
                                    169
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'migrationMetadata';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'destinationToken';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'owner';
                            },
                            {
                                kind: 'const';
                                value: [
                                    6,
                                    221,
                                    246,
                                    225,
                                    215,
                                    101,
                                    161,
                                    147,
                                    217,
                                    203,
                                    225,
                                    70,
                                    206,
                                    235,
                                    121,
                                    172,
                                    28,
                                    180,
                                    133,
                                    237,
                                    95,
                                    91,
                                    55,
                                    145,
                                    58,
                                    140,
                                    245,
                                    133,
                                    126,
                                    255,
                                    0,
                                    169
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'migrationMetadata';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'owner';
                },
                {
                    name: 'sender';
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                    docs: ['tokenProgram'];
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                }
            ];
            args: [];
        },
        {
            name: 'migrateMeteoraDammLockLpToken';
            discriminator: [177, 55, 238, 157, 251, 88, 165, 42];
            accounts: [
                {
                    name: 'virtualPool';
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'migrationMetadata';
                    docs: ['migrationMetadata'];
                    writable: true;
                },
                {
                    name: 'poolAuthority';
                    writable: true;
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'pool';
                    writable: true;
                    relations: ['lockEscrow'];
                },
                {
                    name: 'lpMint';
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'lockEscrow';
                    writable: true;
                },
                {
                    name: 'owner';
                    relations: ['lockEscrow'];
                },
                {
                    name: 'sourceTokens';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'poolAuthority';
                            },
                            {
                                kind: 'const';
                                value: [
                                    6,
                                    221,
                                    246,
                                    225,
                                    215,
                                    101,
                                    161,
                                    147,
                                    217,
                                    203,
                                    225,
                                    70,
                                    206,
                                    235,
                                    121,
                                    172,
                                    28,
                                    180,
                                    133,
                                    237,
                                    95,
                                    91,
                                    55,
                                    145,
                                    58,
                                    140,
                                    245,
                                    133,
                                    126,
                                    255,
                                    0,
                                    169
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'migrationMetadata';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'escrowVault';
                    writable: true;
                },
                {
                    name: 'ammProgram';
                    address: 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB';
                },
                {
                    name: 'aVault';
                },
                {
                    name: 'bVault';
                },
                {
                    name: 'aVaultLp';
                },
                {
                    name: 'bVaultLp';
                },
                {
                    name: 'aVaultLpMint';
                },
                {
                    name: 'bVaultLpMint';
                },
                {
                    name: 'tokenProgram';
                    docs: ['tokenProgram'];
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                }
            ];
            args: [];
        },
        {
            name: 'migrationDammV2';
            discriminator: [156, 169, 230, 103, 53, 228, 80, 64];
            accounts: [
                {
                    name: 'virtualPool';
                    docs: ['virtual pool'];
                    writable: true;
                    relations: ['migrationMetadata'];
                },
                {
                    name: 'migrationMetadata';
                    docs: ['migration metadata'];
                },
                {
                    name: 'config';
                    docs: ['virtual pool config key'];
                    relations: ['virtualPool'];
                },
                {
                    name: 'poolAuthority';
                    writable: true;
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'firstPositionNftMint';
                    writable: true;
                },
                {
                    name: 'firstPositionNftAccount';
                    writable: true;
                },
                {
                    name: 'firstPosition';
                    writable: true;
                },
                {
                    name: 'secondPositionNftMint';
                    writable: true;
                    optional: true;
                },
                {
                    name: 'secondPositionNftAccount';
                    writable: true;
                    optional: true;
                },
                {
                    name: 'secondPosition';
                    writable: true;
                    optional: true;
                },
                {
                    name: 'dammPoolAuthority';
                },
                {
                    name: 'ammProgram';
                    address: 'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG';
                },
                {
                    name: 'baseMint';
                    writable: true;
                },
                {
                    name: 'quoteMint';
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    writable: true;
                },
                {
                    name: 'tokenBVault';
                    writable: true;
                },
                {
                    name: 'baseVault';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'quoteVault';
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenBaseProgram';
                },
                {
                    name: 'tokenQuoteProgram';
                },
                {
                    name: 'token2022Program';
                },
                {
                    name: 'dammEventAuthority';
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                }
            ];
            args: [];
        },
        {
            name: 'migrationDammV2CreateMetadata';
            discriminator: [109, 189, 19, 36, 195, 183, 222, 82];
            accounts: [
                {
                    name: 'virtualPool';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'migrationMetadata';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [100, 97, 109, 109, 95, 118, 50];
                            },
                            {
                                kind: 'account';
                                path: 'virtualPool';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'migrationMeteoraDammCreateMetadata';
            docs: ['migrate damm v1'];
            discriminator: [47, 94, 126, 115, 221, 226, 194, 133];
            accounts: [
                {
                    name: 'virtualPool';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'migrationMetadata';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [109, 101, 116, 101, 111, 114, 97];
                            },
                            {
                                kind: 'account';
                                path: 'virtualPool';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'partnerWithdrawSurplus';
            discriminator: [168, 173, 72, 100, 201, 98, 38, 92];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'virtualPool';
                    writable: true;
                },
                {
                    name: 'tokenQuoteAccount';
                    docs: ['The receiver token account'];
                    writable: true;
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of quote token'];
                    relations: ['config'];
                },
                {
                    name: 'feeClaimer';
                    signer: true;
                    relations: ['config'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'protocolWithdrawSurplus';
            discriminator: [54, 136, 225, 138, 172, 182, 214, 167];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'virtualPool';
                    writable: true;
                },
                {
                    name: 'tokenQuoteAccount';
                    docs: ['The treasury quote token account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    48,
                                    9,
                                    89,
                                    123,
                                    106,
                                    114,
                                    131,
                                    251,
                                    50,
                                    173,
                                    254,
                                    250,
                                    10,
                                    80,
                                    160,
                                    84,
                                    143,
                                    100,
                                    81,
                                    249,
                                    134,
                                    112,
                                    30,
                                    213,
                                    50,
                                    166,
                                    239,
                                    78,
                                    53,
                                    175,
                                    188,
                                    85
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenQuoteProgram';
                            },
                            {
                                kind: 'account';
                                path: 'quoteMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for quote token'];
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of of token'];
                    relations: ['config'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'swap';
            docs: ['TRADING BOTS FUNCTIONS ////'];
            discriminator: [248, 198, 158, 145, 225, 117, 135, 200];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    docs: ['config key'];
                    relations: ['pool'];
                },
                {
                    name: 'pool';
                    docs: ['Pool account'];
                    writable: true;
                },
                {
                    name: 'inputTokenAccount';
                    docs: ['The user token account for input token'];
                    writable: true;
                },
                {
                    name: 'outputTokenAccount';
                    docs: ['The user token account for output token'];
                    writable: true;
                },
                {
                    name: 'baseVault';
                    docs: ['The vault token account for base token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'quoteVault';
                    docs: ['The vault token account for quote token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'baseMint';
                    docs: ['The mint of base token'];
                },
                {
                    name: 'quoteMint';
                    docs: ['The mint of quote token'];
                },
                {
                    name: 'payer';
                    docs: ['The user performing the swap'];
                    signer: true;
                },
                {
                    name: 'tokenBaseProgram';
                    docs: ['Token base program'];
                },
                {
                    name: 'tokenQuoteProgram';
                    docs: ['Token quote program'];
                },
                {
                    name: 'referralTokenAccount';
                    docs: ['referral token account'];
                    writable: true;
                    optional: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'swapParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'withdrawLeftover';
            discriminator: [20, 198, 202, 237, 235, 243, 183, 66];
            accounts: [
                {
                    name: 'poolAuthority';
                    address: 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM';
                },
                {
                    name: 'config';
                    relations: ['virtualPool'];
                },
                {
                    name: 'virtualPool';
                    writable: true;
                },
                {
                    name: 'tokenBaseAccount';
                    docs: ['The receiver token account, withdraw to ATA'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'leftoverReceiver';
                            },
                            {
                                kind: 'account';
                                path: 'tokenBaseProgram';
                            },
                            {
                                kind: 'account';
                                path: 'baseMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'baseVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['virtualPool'];
                },
                {
                    name: 'baseMint';
                    docs: ['The mint of quote token'];
                    relations: ['virtualPool'];
                },
                {
                    name: 'leftoverReceiver';
                    relations: ['config'];
                },
                {
                    name: 'tokenBaseProgram';
                    docs: ['Token base program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        }
    ];
    accounts: [
        {
            name: 'claimFeeOperator';
            discriminator: [166, 48, 134, 86, 34, 200, 188, 150];
        },
        {
            name: 'config';
            discriminator: [155, 12, 170, 224, 30, 250, 204, 130];
        },
        {
            name: 'lockEscrow';
            discriminator: [190, 106, 121, 6, 200, 182, 21, 75];
        },
        {
            name: 'meteoraDammMigrationMetadata';
            discriminator: [17, 155, 141, 215, 207, 4, 133, 156];
        },
        {
            name: 'meteoraDammV2Metadata';
            discriminator: [104, 221, 219, 203, 10, 142, 250, 163];
        },
        {
            name: 'partnerMetadata';
            discriminator: [68, 68, 130, 19, 16, 209, 98, 156];
        },
        {
            name: 'poolConfig';
            discriminator: [26, 108, 14, 123, 116, 230, 129, 43];
        },
        {
            name: 'virtualPool';
            discriminator: [213, 224, 5, 209, 98, 69, 119, 92];
        },
        {
            name: 'virtualPoolMetadata';
            discriminator: [217, 37, 82, 250, 43, 47, 228, 254];
        }
    ];
    events: [
        {
            name: 'evtClaimCreatorTradingFee';
            discriminator: [154, 228, 215, 202, 133, 155, 214, 138];
        },
        {
            name: 'evtClaimProtocolFee';
            discriminator: [186, 244, 75, 251, 188, 13, 25, 33];
        },
        {
            name: 'evtClaimTradingFee';
            discriminator: [26, 83, 117, 240, 92, 202, 112, 254];
        },
        {
            name: 'evtCloseClaimFeeOperator';
            discriminator: [111, 39, 37, 55, 110, 216, 194, 23];
        },
        {
            name: 'evtCreateClaimFeeOperator';
            discriminator: [21, 6, 153, 120, 68, 116, 28, 177];
        },
        {
            name: 'evtCreateConfig';
            discriminator: [131, 207, 180, 174, 180, 73, 165, 54];
        },
        {
            name: 'evtCreateDammV2MigrationMetadata';
            discriminator: [103, 111, 132, 168, 140, 253, 150, 114];
        },
        {
            name: 'evtCreateMeteoraMigrationMetadata';
            discriminator: [99, 167, 133, 63, 214, 143, 175, 139];
        },
        {
            name: 'evtCreatorWithdrawSurplus';
            discriminator: [152, 73, 21, 15, 66, 87, 53, 157];
        },
        {
            name: 'evtCurveComplete';
            discriminator: [229, 231, 86, 84, 156, 134, 75, 24];
        },
        {
            name: 'evtInitializePool';
            discriminator: [228, 50, 246, 85, 203, 66, 134, 37];
        },
        {
            name: 'evtPartnerMetadata';
            discriminator: [200, 127, 6, 55, 13, 32, 8, 150];
        },
        {
            name: 'evtPartnerWithdrawSurplus';
            discriminator: [195, 56, 152, 9, 232, 72, 35, 22];
        },
        {
            name: 'evtProtocolWithdrawSurplus';
            discriminator: [109, 111, 28, 221, 134, 195, 230, 203];
        },
        {
            name: 'evtSwap';
            discriminator: [27, 60, 21, 213, 138, 170, 187, 147];
        },
        {
            name: 'evtVirtualPoolMetadata';
            discriminator: [188, 18, 72, 76, 195, 91, 38, 74];
        },
        {
            name: 'evtWithdrawLeftover';
            discriminator: [191, 189, 104, 143, 111, 156, 94, 229];
        }
    ];
    errors: [
        {
            code: 6000;
            name: 'mathOverflow';
            msg: 'Math operation overflow';
        },
        {
            code: 6001;
            name: 'invalidFee';
            msg: 'Invalid fee setup';
        },
        {
            code: 6002;
            name: 'exceededSlippage';
            msg: 'Exceeded slippage tolerance';
        },
        {
            code: 6003;
            name: 'exceedMaxFeeBps';
            msg: 'Exceeded max fee bps';
        },
        {
            code: 6004;
            name: 'invalidAdmin';
            msg: 'Invalid admin';
        },
        {
            code: 6005;
            name: 'amountIsZero';
            msg: 'Amount is zero';
        },
        {
            code: 6006;
            name: 'typeCastFailed';
            msg: 'Type cast error';
        },
        {
            code: 6007;
            name: 'invalidActivationType';
            msg: 'Invalid activation type';
        },
        {
            code: 6008;
            name: 'invalidQuoteMint';
            msg: 'Invalid quote mint';
        },
        {
            code: 6009;
            name: 'invalidCollectFeeMode';
            msg: 'Invalid collect fee mode';
        },
        {
            code: 6010;
            name: 'invalidMigrationFeeOption';
            msg: 'Invalid migration fee option';
        },
        {
            code: 6011;
            name: 'invalidInput';
            msg: 'Invalid input';
        },
        {
            code: 6012;
            name: 'notEnoughLiquidity';
            msg: 'Not enough liquidity';
        },
        {
            code: 6013;
            name: 'poolIsCompleted';
            msg: 'Pool is completed';
        },
        {
            code: 6014;
            name: 'poolIsIncompleted';
            msg: 'Pool is incompleted';
        },
        {
            code: 6015;
            name: 'invalidMigrationOption';
            msg: 'Invalid migration option';
        },
        {
            code: 6016;
            name: 'invalidTokenDecimals';
            msg: 'Invalid activation type';
        },
        {
            code: 6017;
            name: 'invalidTokenType';
            msg: 'Invalid token type';
        },
        {
            code: 6018;
            name: 'invalidFeePercentage';
            msg: 'Invalid fee percentage';
        },
        {
            code: 6019;
            name: 'invalidQuoteThreshold';
            msg: 'Invalid quote threshold';
        },
        {
            code: 6020;
            name: 'invalidTokenSupply';
            msg: 'Invalid token supply';
        },
        {
            code: 6021;
            name: 'invalidCurve';
            msg: 'Invalid curve';
        },
        {
            code: 6022;
            name: 'notPermitToDoThisAction';
            msg: 'Not permit to do this action';
        },
        {
            code: 6023;
            name: 'invalidOwnerAccount';
            msg: 'Invalid owner account';
        },
        {
            code: 6024;
            name: 'invalidConfigAccount';
            msg: 'Invalid config account';
        },
        {
            code: 6025;
            name: 'surplusHasBeenWithdraw';
            msg: 'Surplus has been withdraw';
        },
        {
            code: 6026;
            name: 'leftoverHasBeenWithdraw';
            msg: 'Leftover has been withdraw';
        },
        {
            code: 6027;
            name: 'totalBaseTokenExceedMaxSupply';
            msg: 'Total base token is exceeded max supply';
        },
        {
            code: 6028;
            name: 'unsupportNativeMintToken2022';
            msg: 'Unsupport native mint token 2022';
        },
        {
            code: 6029;
            name: 'insufficientLiquidityForMigration';
            msg: 'Insufficient liquidity for migration';
        },
        {
            code: 6030;
            name: 'missingPoolConfigInRemainingAccount';
            msg: 'Missing pool config in remaining account';
        },
        {
            code: 6031;
            name: 'invalidVestingParameters';
            msg: 'Invalid vesting parameters';
        },
        {
            code: 6032;
            name: 'invalidLeftoverAddress';
            msg: 'Invalid leftover address';
        },
        {
            code: 6033;
            name: 'swapAmountIsOverAThreshold';
            msg: 'Swap amount is over a threshold';
        },
        {
            code: 6034;
            name: 'invalidFeeScheduler';
            msg: 'Invalid fee scheduler';
        },
        {
            code: 6035;
            name: 'invalidCreatorTradingFeePercentage';
            msg: 'Invalid creator trading fee percentage';
        }
    ];
    types: [
        {
            name: 'baseFeeConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u64';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'feeSchedulerMode';
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u8', 5];
                        };
                    }
                ];
            };
        },
        {
            name: 'baseFeeParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u64';
                    },
                    {
                        name: 'feeSchedulerMode';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'claimFeeOperator';
            docs: ['Parameter that set by the protocol'];
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'operator';
                        docs: ['operator'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['Reserve'];
                        type: {
                            array: ['u8', 128];
                        };
                    }
                ];
            };
        },
        {
            name: 'config';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFees';
                            };
                        };
                    },
                    {
                        name: 'activationDuration';
                        type: 'u64';
                    },
                    {
                        name: 'vaultConfigKey';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreatorAuthority';
                        type: 'pubkey';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'partnerFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 219];
                        };
                    }
                ];
            };
        },
        {
            name: 'configParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'collectFeeMode';
                        type: 'u8';
                    },
                    {
                        name: 'migrationOption';
                        type: 'u8';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'tokenType';
                        type: 'u8';
                    },
                    {
                        name: 'tokenDecimal';
                        type: 'u8';
                    },
                    {
                        name: 'partnerLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'partnerLockedLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'creatorLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'creatorLockedLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'migrationQuoteThreshold';
                        type: 'u64';
                    },
                    {
                        name: 'sqrtStartPrice';
                        type: 'u128';
                    },
                    {
                        name: 'lockedVesting';
                        type: {
                            defined: {
                                name: 'lockedVestingParams';
                            };
                        };
                    },
                    {
                        name: 'migrationFeeOption';
                        type: 'u8';
                    },
                    {
                        name: 'tokenSupply';
                        type: {
                            option: {
                                defined: {
                                    name: 'tokenSupplyParams';
                                };
                            };
                        };
                    },
                    {
                        name: 'creatorTradingFeePercentage';
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u8', 7];
                        };
                    },
                    {
                        name: 'padding1';
                        docs: ['padding for future use'];
                        type: {
                            array: ['u64', 7];
                        };
                    },
                    {
                        name: 'curve';
                        type: {
                            vec: {
                                defined: {
                                    name: 'liquidityDistributionParameters';
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'createPartnerMetadataParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 96];
                        };
                    },
                    {
                        name: 'name';
                        type: 'string';
                    },
                    {
                        name: 'website';
                        type: 'string';
                    },
                    {
                        name: 'logo';
                        type: 'string';
                    }
                ];
            };
        },
        {
            name: 'createVirtualPoolMetadataParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 96];
                        };
                    },
                    {
                        name: 'name';
                        type: 'string';
                    },
                    {
                        name: 'website';
                        type: 'string';
                    },
                    {
                        name: 'logo';
                        type: 'string';
                    }
                ];
            };
        },
        {
            name: 'dynamicFeeConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'initialized';
                        type: 'u8';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 7];
                        };
                    },
                    {
                        name: 'maxVolatilityAccumulator';
                        type: 'u32';
                    },
                    {
                        name: 'variableFeeControl';
                        type: 'u32';
                    },
                    {
                        name: 'binStep';
                        type: 'u16';
                    },
                    {
                        name: 'filterPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'decayPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u16';
                    },
                    {
                        name: 'padding2';
                        type: {
                            array: ['u8', 8];
                        };
                    },
                    {
                        name: 'binStepU128';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'dynamicFeeParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'binStep';
                        type: 'u16';
                    },
                    {
                        name: 'binStepU128';
                        type: 'u128';
                    },
                    {
                        name: 'filterPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'decayPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u16';
                    },
                    {
                        name: 'maxVolatilityAccumulator';
                        type: 'u32';
                    },
                    {
                        name: 'variableFeeControl';
                        type: 'u32';
                    }
                ];
            };
        },
        {
            name: 'evtClaimCreatorTradingFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBaseAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenQuoteAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimProtocolFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBaseAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenQuoteAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimTradingFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBaseAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenQuoteAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtCloseClaimFeeOperator';
            docs: ['Close claim fee operator'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'claimFeeOperator';
                        type: 'pubkey';
                    },
                    {
                        name: 'operator';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateClaimFeeOperator';
            docs: ['Create claim fee operator'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'operator';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateConfig';
            docs: ['Create config'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'config';
                        type: 'pubkey';
                    },
                    {
                        name: 'quoteMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'feeClaimer';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'collectFeeMode';
                        type: 'u8';
                    },
                    {
                        name: 'migrationOption';
                        type: 'u8';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'tokenDecimal';
                        type: 'u8';
                    },
                    {
                        name: 'tokenType';
                        type: 'u8';
                    },
                    {
                        name: 'partnerLockedLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'partnerLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'creatorLockedLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'creatorLpPercentage';
                        type: 'u8';
                    },
                    {
                        name: 'swapBaseAmount';
                        type: 'u64';
                    },
                    {
                        name: 'migrationQuoteThreshold';
                        type: 'u64';
                    },
                    {
                        name: 'migrationBaseAmount';
                        type: 'u64';
                    },
                    {
                        name: 'sqrtStartPrice';
                        type: 'u128';
                    },
                    {
                        name: 'lockedVesting';
                        type: {
                            defined: {
                                name: 'lockedVestingParams';
                            };
                        };
                    },
                    {
                        name: 'migrationFeeOption';
                        type: 'u8';
                    },
                    {
                        name: 'fixedTokenSupplyFlag';
                        type: 'u8';
                    },
                    {
                        name: 'preMigrationTokenSupply';
                        type: 'u64';
                    },
                    {
                        name: 'postMigrationTokenSupply';
                        type: 'u64';
                    },
                    {
                        name: 'curve';
                        type: {
                            vec: {
                                defined: {
                                    name: 'liquidityDistributionParameters';
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'evtCreateDammV2MigrationMetadata';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPool';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateMeteoraMigrationMetadata';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPool';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreatorWithdrawSurplus';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'surplusAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtCurveComplete';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'config';
                        type: 'pubkey';
                    },
                    {
                        name: 'baseReserve';
                        type: 'u64';
                    },
                    {
                        name: 'quoteReserve';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtInitializePool';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'config';
                        type: 'pubkey';
                    },
                    {
                        name: 'creator';
                        type: 'pubkey';
                    },
                    {
                        name: 'baseMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolType';
                        type: 'u8';
                    },
                    {
                        name: 'activationPoint';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtPartnerMetadata';
            docs: ['Create partner metadata'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'partnerMetadata';
                        type: 'pubkey';
                    },
                    {
                        name: 'feeClaimer';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtPartnerWithdrawSurplus';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'surplusAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtProtocolWithdrawSurplus';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'surplusAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtSwap';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'config';
                        type: 'pubkey';
                    },
                    {
                        name: 'tradeDirection';
                        type: 'u8';
                    },
                    {
                        name: 'hasReferral';
                        type: 'bool';
                    },
                    {
                        name: 'params';
                        type: {
                            defined: {
                                name: 'swapParameters';
                            };
                        };
                    },
                    {
                        name: 'swapResult';
                        type: {
                            defined: {
                                name: 'swapResult';
                            };
                        };
                    },
                    {
                        name: 'amountIn';
                        type: 'u64';
                    },
                    {
                        name: 'currentTimestamp';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtVirtualPoolMetadata';
            docs: ['Create virtual pool metadata'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPoolMetadata';
                        type: 'pubkey';
                    },
                    {
                        name: 'virtualPool';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtWithdrawLeftover';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'leftoverReceiver';
                        type: 'pubkey';
                    },
                    {
                        name: 'leftoverAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'initializePoolParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'name';
                        type: 'string';
                    },
                    {
                        name: 'symbol';
                        type: 'string';
                    },
                    {
                        name: 'uri';
                        type: 'string';
                    }
                ];
            };
        },
        {
            name: 'liquidityDistributionConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'sqrtPrice';
                        type: 'u128';
                    },
                    {
                        name: 'liquidity';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'liquidityDistributionParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'sqrtPrice';
                        type: 'u128';
                    },
                    {
                        name: 'liquidity';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'lockEscrow';
            docs: ['State of lock escrow account'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'escrowVault';
                        type: 'pubkey';
                    },
                    {
                        name: 'bump';
                        type: 'u8';
                    },
                    {
                        name: 'totalLockedAmount';
                        type: 'u64';
                    },
                    {
                        name: 'lpPerToken';
                        type: 'u128';
                    },
                    {
                        name: 'unclaimedFeePending';
                        type: 'u64';
                    },
                    {
                        name: 'aFee';
                        type: 'u64';
                    },
                    {
                        name: 'bFee';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'lockedVestingConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amountPerPeriod';
                        type: 'u64';
                    },
                    {
                        name: 'cliffDurationFromMigrationTime';
                        type: 'u64';
                    },
                    {
                        name: 'frequency';
                        type: 'u64';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u64';
                    },
                    {
                        name: 'cliffUnlockAmount';
                        type: 'u64';
                    },
                    {
                        name: 'padding';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'lockedVestingParams';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amountPerPeriod';
                        type: 'u64';
                    },
                    {
                        name: 'cliffDurationFromMigrationTime';
                        type: 'u64';
                    },
                    {
                        name: 'frequency';
                        type: 'u64';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u64';
                    },
                    {
                        name: 'cliffUnlockAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'meteoraDammMigrationMetadata';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPool';
                        docs: ['pool'];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreator';
                        docs: ['pool creator'];
                        type: 'pubkey';
                    },
                    {
                        name: 'partner';
                        docs: ['partner'];
                        type: 'pubkey';
                    },
                    {
                        name: 'lpMint';
                        docs: ['lp mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'partnerLockedLp';
                        docs: ['partner locked lp'];
                        type: 'u64';
                    },
                    {
                        name: 'partnerLp';
                        docs: ['partner lp'];
                        type: 'u64';
                    },
                    {
                        name: 'creatorLockedLp';
                        docs: ['creator locked lp'];
                        type: 'u64';
                    },
                    {
                        name: 'creatorLp';
                        docs: ['creator lp'];
                        type: 'u64';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding'];
                        type: 'u8';
                    },
                    {
                        name: 'creatorLockedStatus';
                        docs: ['flag to check whether lp is locked for creator'];
                        type: 'u8';
                    },
                    {
                        name: 'partnerLockedStatus';
                        docs: ['flag to check whether lp is locked for partner'];
                        type: 'u8';
                    },
                    {
                        name: 'creatorClaimStatus';
                        docs: [
                            'flag to check whether creator has claimed lp token'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'partnerClaimStatus';
                        docs: [
                            'flag to check whether partner has claimed lp token'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'padding';
                        docs: ['Reserve'];
                        type: {
                            array: ['u8', 107];
                        };
                    }
                ];
            };
        },
        {
            name: 'meteoraDammV2Metadata';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPool';
                        docs: ['pool'];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreator';
                        docs: ['pool creator'];
                        type: 'pubkey';
                    },
                    {
                        name: 'partner';
                        docs: ['partner'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['Reserve'];
                        type: {
                            array: ['u8', 126];
                        };
                    }
                ];
            };
        },
        {
            name: 'partnerMetadata';
            docs: ['Metadata for a partner.'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'feeClaimer';
                        docs: ['fee claimer'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['padding for future use'];
                        type: {
                            array: ['u128', 6];
                        };
                    },
                    {
                        name: 'name';
                        docs: ['Name of partner.'];
                        type: 'string';
                    },
                    {
                        name: 'website';
                        docs: ['Website of partner.'];
                        type: 'string';
                    },
                    {
                        name: 'logo';
                        docs: ['Logo of partner'];
                        type: 'string';
                    }
                ];
            };
        },
        {
            name: 'poolConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'quoteMint';
                        docs: ['quote mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'feeClaimer';
                        docs: ['Address to get the fee'];
                        type: 'pubkey';
                    },
                    {
                        name: 'leftoverReceiver';
                        docs: [
                            'Address to receive extra base token after migration, in case token is fixed supply'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolFees';
                        docs: ['Pool fee'];
                        type: {
                            defined: {
                                name: 'poolFeesConfig';
                            };
                        };
                    },
                    {
                        name: 'collectFeeMode';
                        docs: ['Collect fee mode'];
                        type: 'u8';
                    },
                    {
                        name: 'migrationOption';
                        docs: ['migration option'];
                        type: 'u8';
                    },
                    {
                        name: 'activationType';
                        docs: ['whether mode slot or timestamp'];
                        type: 'u8';
                    },
                    {
                        name: 'tokenDecimal';
                        docs: ['token decimals'];
                        type: 'u8';
                    },
                    {
                        name: 'version';
                        docs: ['version'];
                        type: 'u8';
                    },
                    {
                        name: 'tokenType';
                        docs: ['token type of base token'];
                        type: 'u8';
                    },
                    {
                        name: 'quoteTokenFlag';
                        docs: ['quote token flag'];
                        type: 'u8';
                    },
                    {
                        name: 'partnerLockedLpPercentage';
                        docs: ['partner locked lp percentage'];
                        type: 'u8';
                    },
                    {
                        name: 'partnerLpPercentage';
                        docs: ['partner lp percentage'];
                        type: 'u8';
                    },
                    {
                        name: 'creatorLockedLpPercentage';
                        docs: ['creator post migration fee percentage'];
                        type: 'u8';
                    },
                    {
                        name: 'creatorLpPercentage';
                        docs: ['creator lp percentage'];
                        type: 'u8';
                    },
                    {
                        name: 'migrationFeeOption';
                        docs: ['migration fee option'];
                        type: 'u8';
                    },
                    {
                        name: 'fixedTokenSupplyFlag';
                        docs: [
                            'flag to indicate whether token is dynamic supply (0) or fixed supply (1)'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'creatorTradingFeePercentage';
                        docs: ['creator trading fee percentage'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding 0'];
                        type: {
                            array: ['u8', 2];
                        };
                    },
                    {
                        name: 'padding1';
                        docs: ['padding 1'];
                        type: {
                            array: ['u8', 8];
                        };
                    },
                    {
                        name: 'swapBaseAmount';
                        docs: ['swap base amount'];
                        type: 'u64';
                    },
                    {
                        name: 'migrationQuoteThreshold';
                        docs: ['migration quote threshold (in quote token)'];
                        type: 'u64';
                    },
                    {
                        name: 'migrationBaseThreshold';
                        docs: ['migration base threshold (in base token)'];
                        type: 'u64';
                    },
                    {
                        name: 'migrationSqrtPrice';
                        docs: ['migration sqrt price'];
                        type: 'u128';
                    },
                    {
                        name: 'lockedVestingConfig';
                        docs: ['locked vesting config'];
                        type: {
                            defined: {
                                name: 'lockedVestingConfig';
                            };
                        };
                    },
                    {
                        name: 'preMigrationTokenSupply';
                        docs: ['pre migration token supply'];
                        type: 'u64';
                    },
                    {
                        name: 'postMigrationTokenSupply';
                        docs: ['post migration token supply'];
                        type: 'u64';
                    },
                    {
                        name: 'padding2';
                        docs: ['padding 2'];
                        type: {
                            array: ['u128', 2];
                        };
                    },
                    {
                        name: 'sqrtStartPrice';
                        docs: ['minimum price'];
                        type: 'u128';
                    },
                    {
                        name: 'curve';
                        docs: [
                            'curve, only use 20 point firstly, we can extend that latter'
                        ];
                        type: {
                            array: [
                                {
                                    defined: {
                                        name: 'liquidityDistributionConfig';
                                    };
                                },
                                20
                            ];
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFeeParameters';
            docs: ['Information regarding fee charges'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseFee';
                        docs: ['Base fee'];
                        type: {
                            defined: {
                                name: 'baseFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'dynamicFee';
                        docs: ['dynamic fee'];
                        type: {
                            option: {
                                defined: {
                                    name: 'dynamicFeeParameters';
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFees';
            docs: ['Information regarding fee charges'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'tradeFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'tradeFeeDenominator';
                        type: 'u64';
                    },
                    {
                        name: 'protocolTradeFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'protocolTradeFeeDenominator';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'poolFeesConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseFee';
                        type: {
                            defined: {
                                name: 'baseFeeConfig';
                            };
                        };
                    },
                    {
                        name: 'dynamicFee';
                        type: {
                            defined: {
                                name: 'dynamicFeeConfig';
                            };
                        };
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u64', 5];
                        };
                    },
                    {
                        name: 'padding1';
                        type: {
                            array: ['u8', 6];
                        };
                    },
                    {
                        name: 'protocolFeePercent';
                        type: 'u8';
                    },
                    {
                        name: 'referralFeePercent';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'poolMetrics';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'totalProtocolBaseFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalProtocolQuoteFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalTradingBaseFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalTradingQuoteFee';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'swapParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amountIn';
                        type: 'u64';
                    },
                    {
                        name: 'minimumAmountOut';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'swapResult';
            docs: ['Encodes all results of swapping'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'actualInputAmount';
                        type: 'u64';
                    },
                    {
                        name: 'outputAmount';
                        type: 'u64';
                    },
                    {
                        name: 'nextSqrtPrice';
                        type: 'u128';
                    },
                    {
                        name: 'tradingFee';
                        type: 'u64';
                    },
                    {
                        name: 'protocolFee';
                        type: 'u64';
                    },
                    {
                        name: 'referralFee';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'tokenSupplyParams';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'preMigrationTokenSupply';
                        docs: ['pre migration token supply'];
                        type: 'u64';
                    },
                    {
                        name: 'postMigrationTokenSupply';
                        docs: ['post migration token supply'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'virtualPool';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'volatilityTracker';
                        docs: ['volatility tracker'];
                        type: {
                            defined: {
                                name: 'volatilityTracker';
                            };
                        };
                    },
                    {
                        name: 'config';
                        docs: ['config key'];
                        type: 'pubkey';
                    },
                    {
                        name: 'creator';
                        docs: ['creator'];
                        type: 'pubkey';
                    },
                    {
                        name: 'baseMint';
                        docs: ['base mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'baseVault';
                        docs: ['base vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'quoteVault';
                        docs: ['quote vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'baseReserve';
                        docs: ['base reserve'];
                        type: 'u64';
                    },
                    {
                        name: 'quoteReserve';
                        docs: ['quote reserve'];
                        type: 'u64';
                    },
                    {
                        name: 'protocolBaseFee';
                        docs: ['protocol base fee'];
                        type: 'u64';
                    },
                    {
                        name: 'protocolQuoteFee';
                        docs: ['protocol quote fee'];
                        type: 'u64';
                    },
                    {
                        name: 'partnerBaseFee';
                        docs: ['partner base fee'];
                        type: 'u64';
                    },
                    {
                        name: 'partnerQuoteFee';
                        docs: ['trading quote fee'];
                        type: 'u64';
                    },
                    {
                        name: 'sqrtPrice';
                        docs: ['current price'];
                        type: 'u128';
                    },
                    {
                        name: 'activationPoint';
                        docs: ['Activation point'];
                        type: 'u64';
                    },
                    {
                        name: 'poolType';
                        docs: ['pool type, spl token or token2022'];
                        type: 'u8';
                    },
                    {
                        name: 'isMigrated';
                        docs: ['is migrated'];
                        type: 'u8';
                    },
                    {
                        name: 'isPartnerWithdrawSurplus';
                        docs: ['is partner withdraw surplus'];
                        type: 'u8';
                    },
                    {
                        name: 'isProtocolWithdrawSurplus';
                        docs: ['is protocol withdraw surplus'];
                        type: 'u8';
                    },
                    {
                        name: 'migrationProgress';
                        docs: ['migration progress'];
                        type: 'u8';
                    },
                    {
                        name: 'isWithdrawLeftover';
                        docs: ['is withdraw leftover'];
                        type: 'u8';
                    },
                    {
                        name: 'isCreatorWithdrawSurplus';
                        docs: ['is creator withdraw surplus'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding'];
                        type: {
                            array: ['u8', 1];
                        };
                    },
                    {
                        name: 'metrics';
                        docs: ['pool metrics'];
                        type: {
                            defined: {
                                name: 'poolMetrics';
                            };
                        };
                    },
                    {
                        name: 'finishCurveTimestamp';
                        docs: ['The time curve is finished'];
                        type: 'u64';
                    },
                    {
                        name: 'creatorBaseFee';
                        docs: ['creator base fee'];
                        type: 'u64';
                    },
                    {
                        name: 'creatorQuoteFee';
                        docs: ['creator quote fee'];
                        type: 'u64';
                    },
                    {
                        name: 'padding1';
                        docs: ['Padding for further use'];
                        type: {
                            array: ['u64', 7];
                        };
                    }
                ];
            };
        },
        {
            name: 'virtualPoolMetadata';
            docs: ['Metadata for a virtual pool.'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'virtualPool';
                        docs: ['virtual pool'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['padding for future use'];
                        type: {
                            array: ['u128', 6];
                        };
                    },
                    {
                        name: 'name';
                        docs: ['Name of project.'];
                        type: 'string';
                    },
                    {
                        name: 'website';
                        docs: ['Website of project.'];
                        type: 'string';
                    },
                    {
                        name: 'logo';
                        docs: ['Logo of project'];
                        type: 'string';
                    }
                ];
            };
        },
        {
            name: 'volatilityTracker';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'lastUpdateTimestamp';
                        type: 'u64';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 8];
                        };
                    },
                    {
                        name: 'sqrtPriceReference';
                        type: 'u128';
                    },
                    {
                        name: 'volatilityAccumulator';
                        type: 'u128';
                    },
                    {
                        name: 'volatilityReference';
                        type: 'u128';
                    }
                ];
            };
        }
    ];
};

type ClaimCreatorTradingFeeAccounts = Accounts<DynamicBondingCurve['instructions']['0']>['claimCreatorTradingFee'];
type ClaimProtocolFeeAccounts = Accounts<DynamicBondingCurve['instructions']['1']>['claimProtocolFee'];
type ClaimTradingFeeAccounts = Accounts<DynamicBondingCurve['instructions']['2']>['claimTradingFee'];
type CloseClaimFeeOperatorAccounts = Accounts<DynamicBondingCurve['instructions']['3']>['closeClaimFeeOperator'];
type CreateClaimFeeOperatorAccounts = Accounts<DynamicBondingCurve['instructions']['4']>['createClaimFeeOperator'];
type CreateConfigAccounts = Accounts<DynamicBondingCurve['instructions']['5']>['createConfig'];
type CreateLockerAccounts = Accounts<DynamicBondingCurve['instructions']['6']>['createLocker'];
type CreatePartnerMetadata = Accounts<DynamicBondingCurve['instructions']['7']>['createPartnerMetadata'];
type CreateVirtualPoolMetadata = Accounts<DynamicBondingCurve['instructions']['8']>['createVirtualPoolMetadata'];
type CreatorWithdrawSurplusAccounts = Accounts<DynamicBondingCurve['instructions']['9']>['creatorWithdrawSurplus'];
type InitializeVirtualPoolWithSplTokenAccounts = Accounts<DynamicBondingCurve['instructions']['10']>['initializeVirtualPoolWithSplToken'];
type InitializeVirtualPoolWithToken2022Accounts = Accounts<DynamicBondingCurve['instructions']['11']>['initializeVirtualPoolWithToken2022'];
type MigrateMeteoraDammAccounts = Accounts<DynamicBondingCurve['instructions']['12']>['migrateMeteoraDamm'];
type MigrateMeteoraDammClaimLpTokenAccounts = Accounts<DynamicBondingCurve['instructions']['13']>['migrateMeteoraDammClaimLpToken'];
type MigrateMeteoraDammLockLpTokenAccounts = Accounts<DynamicBondingCurve['instructions']['14']>['migrateMeteoraDammLockLpToken'];
type MigrationDammV2Accounts = Accounts<DynamicBondingCurve['instructions']['15']>['migrationDammV2'];
type MigrationDammV2CreateMetadataAccounts = Accounts<DynamicBondingCurve['instructions']['16']>['migrationDammV2CreateMetadata'];
type MigrationMeteoraDammCreateMetadataAccounts = Accounts<DynamicBondingCurve['instructions']['17']>['migrationMeteoraDammCreateMetadata'];
type PartnerWithdrawSurplusAccounts = Accounts<DynamicBondingCurve['instructions']['18']>['partnerWithdrawSurplus'];
type SwapAccounts = Accounts<DynamicBondingCurve['instructions']['20']>['swap'];
type WithdrawLeftoverAccounts = Accounts<DynamicBondingCurve['instructions']['21']>['withdrawLeftover'];
type ConfigParameters = IdlTypes<DynamicBondingCurve>['configParameters'];
type LockedVestingParameters = IdlTypes<DynamicBondingCurve>['lockedVestingParams'];
type InitializePoolParameters = IdlTypes<DynamicBondingCurve>['initializePoolParameters'];
type SwapParameters = IdlTypes<DynamicBondingCurve>['swapParameters'];
type PoolFeeParameters = IdlTypes<DynamicBondingCurve>['poolFeeParameters'];
type DynamicFeeParameters = IdlTypes<DynamicBondingCurve>['dynamicFeeParameters'];
type LiquidityDistributionParameters = IdlTypes<DynamicBondingCurve>['liquidityDistributionParameters'];
type PoolFeesConfig = IdlTypes<DynamicBondingCurve>['poolFeesConfig'];
type DynamicFeeConfig = IdlTypes<DynamicBondingCurve>['dynamicFeeConfig'];
type BaseFeeConfig = IdlTypes<DynamicBondingCurve>['baseFeeConfig'];
type PoolFees = IdlTypes<DynamicBondingCurve>['poolFees'];
type PoolMetrics = IdlTypes<DynamicBondingCurve>['poolMetrics'];
type SwapResult = IdlTypes<DynamicBondingCurve>['swapResult'];
type CreatePartnerMetadataParameters = IdlTypes<DynamicBondingCurve>['createPartnerMetadataParameters'];
type CreateVirtualPoolMetadataParameters = IdlTypes<DynamicBondingCurve>['createVirtualPoolMetadataParameters'];
type ClaimFeeOperator = IdlAccounts<DynamicBondingCurve>['claimFeeOperator'];
type Config = IdlAccounts<DynamicBondingCurve>['config'];
type MeteoraDammMigrationMetadata = IdlAccounts<DynamicBondingCurve>['meteoraDammMigrationMetadata'];
type MeteoraDammV2MigrationMetadata = IdlAccounts<DynamicBondingCurve>['meteoraDammV2Metadata'];
type LockEscrow = IdlAccounts<DynamicBondingCurve>['lockEscrow'];
type VolatilityTracker = IdlTypes<DynamicBondingCurve>['volatilityTracker'];
type VirtualPool = IdlAccounts<DynamicBondingCurve>['virtualPool'];
type PoolConfig = IdlAccounts<DynamicBondingCurve>['poolConfig'];
type PartnerMetadata = IdlAccounts<DynamicBondingCurve>['partnerMetadata'];
type VirtualPoolMetadata = IdlAccounts<DynamicBondingCurve>['virtualPoolMetadata'];
declare enum ActivationType {
    Slot = 0,
    Timestamp = 1
}
declare enum TokenType {
    SPL = 0,
    Token2022 = 1
}
declare enum CollectFeeMode {
    OnlyQuote = 0,
    Both = 1
}
declare enum MigrationOption {
    MET_DAMM = 0,
    MET_DAMM_V2 = 1
}
declare enum GetFeeMode {
    QuoteToken = 0,
    OutputToken = 1
}
declare enum FeeSchedulerMode {
    Linear = 0,
    Exponential = 1
}
declare enum MigrationFeeOption {
    FixedBps25 = 0,
    FixedBps30 = 1,
    FixedBps100 = 2,
    FixedBps200 = 3,
    FixedBps400 = 4,
    FixedBps600 = 5
}
declare enum TokenDecimal {
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9
}
declare enum TradeDirection {
    BaseToQuote = 0,
    QuoteToBase = 1
}
declare enum Rounding {
    Up = 0,
    Down = 1
}
type BaseFee = {
    cliffFeeNumerator: BN;
    numberOfPeriod: number;
    periodFrequency: BN;
    reductionFactor: BN;
    feeSchedulerMode: FeeSchedulerMode;
};
type CreateConfigParam = Omit<CreateConfigAccounts, 'program' | 'eventAuthority' | 'systemProgram'> & ConfigParameters;
type CreateDammV1MigrationMetadataParam = {
    payer: PublicKey;
    virtualPool: PublicKey;
    config: PublicKey;
};
type CreateDammV2MigrationMetadataParam = CreateDammV1MigrationMetadataParam;
type FeeSchedulerParameters = {
    numberOfPeriod: number;
    reductionFactor: number;
    periodFrequency: number;
    feeSchedulerMode: FeeSchedulerMode;
};
type BuildCurveBaseParam = {
    totalTokenSupply: number;
    migrationOption: MigrationOption;
    tokenBaseDecimal: TokenDecimal;
    tokenQuoteDecimal: TokenDecimal;
    lockedVesting: LockedVestingParameters;
    feeSchedulerParam: FeeSchedulerParameters;
    baseFeeBps: number;
    dynamicFeeEnabled: boolean;
    activationType: ActivationType;
    collectFeeMode: CollectFeeMode;
    migrationFeeOption: MigrationFeeOption;
    tokenType: TokenType;
    partnerLpPercentage: number;
    creatorLpPercentage: number;
    partnerLockedLpPercentage: number;
    creatorLockedLpPercentage: number;
    creatorTradingFeePercentage: number;
    leftover: number;
};
type BuildCurveParam = BuildCurveBaseParam & {
    percentageSupplyOnMigration: number;
    migrationQuoteThreshold: number;
};
type BuildCurveByMarketCapParam = BuildCurveBaseParam & {
    initialMarketCap: number;
    migrationMarketCap: number;
};
type BuildCurveGraphParam = BuildCurveBaseParam & {
    initialMarketCap: number;
    migrationMarketCap: number;
    liquidityWeights: number[];
};
type BuildCurveAndCreateConfigParam = {
    buildCurveParam: BuildCurveParam;
    feeClaimer: PublicKey;
    leftoverReceiver: PublicKey;
    payer: PublicKey;
    quoteMint: PublicKey;
    config: PublicKey;
};
type BuildCurveAndCreateConfigByMarketCapParam = {
    buildCurveByMarketCapParam: BuildCurveByMarketCapParam;
    feeClaimer: PublicKey;
    leftoverReceiver: PublicKey;
    payer: PublicKey;
    quoteMint: PublicKey;
    config: PublicKey;
};
type BuildCurveGraphAndCreateConfigParam = {
    buildCurveGraphParam: BuildCurveGraphParam;
    feeClaimer: PublicKey;
    leftoverReceiver: PublicKey;
    payer: PublicKey;
    quoteMint: PublicKey;
    config: PublicKey;
};
type MigrateToDammV1Param = {
    payer: PublicKey;
    virtualPool: PublicKey;
    dammConfig: PublicKey;
};
type MigrateToDammV2Param = {
    payer: PublicKey;
    virtualPool: PublicKey;
    dammConfig: PublicKey;
};
type MigrateToDammV2Response = {
    transaction: Transaction;
    firstPositionNftKeypair: Keypair;
    secondPositionNftKeypair: Keypair;
};
type ClaimTradingFeeParam = {
    feeClaimer: PublicKey;
    payer: PublicKey;
    pool: PublicKey;
    maxBaseAmount: BN;
    maxQuoteAmount: BN;
    receiver?: PublicKey;
};
type CreateVirtualPoolMetadataParam = {
    virtualPool: PublicKey;
    name: string;
    website: string;
    logo: string;
    creator: PublicKey;
    payer: PublicKey;
};
type CreatePartnerMetadataParam = {
    name: string;
    website: string;
    logo: string;
    feeClaimer: PublicKey;
    payer: PublicKey;
};
type InitializePoolBaseParam = {
    name: string;
    symbol: string;
    uri: string;
    pool: PublicKey;
    config: PublicKey;
    payer: PublicKey;
    poolCreator: PublicKey;
    baseMint: PublicKey;
    baseVault: PublicKey;
    quoteVault: PublicKey;
    quoteMint: PublicKey;
    mintMetadata?: PublicKey;
};
type CreatePoolParam = {
    name: string;
    symbol: string;
    uri: string;
    payer: PublicKey;
    poolCreator: PublicKey;
    config: PublicKey;
    baseMint: PublicKey;
};
type CreatePoolAndBuyParam = {
    createPoolParam: CreatePoolParam;
    buyAmount: BN;
    minimumAmountOut: BN;
    referralTokenAccount: PublicKey | null;
};
type SwapParam = {
    owner: PublicKey;
    pool: PublicKey;
    amountIn: BN;
    minimumAmountOut: BN;
    swapBaseForQuote: boolean;
    referralTokenAccount: PublicKey | null;
};
type SwapQuoteParam = {
    virtualPool: VirtualPool;
    config: PoolConfig;
    swapBaseForQuote: boolean;
    amountIn: BN;
    slippageBps?: number;
    hasReferral: boolean;
    currentPoint: BN;
};
type DammLpTokenParam = {
    payer: PublicKey;
    virtualPool: PublicKey;
    dammConfig: PublicKey;
    isPartner: boolean;
};
type PartnerWithdrawSurplusParam = {
    feeClaimer: PublicKey;
    virtualPool: PublicKey;
};
type WithdrawLeftoverParam = {
    payer: PublicKey;
    virtualPool: PublicKey;
};
type CreateLockerParam = {
    payer: PublicKey;
    virtualPool: PublicKey;
};
type ClaimCreatorTradingFeeParam = {
    creator: PublicKey;
    payer: PublicKey;
    pool: PublicKey;
    maxBaseAmount: BN;
    maxQuoteAmount: BN;
    receiver?: PublicKey;
};
type CreatorWithdrawSurplusParam = {
    creator: PublicKey;
    virtualPool: PublicKey;
};
interface FeeResult {
    amount: BN;
    protocolFee: BN;
    tradingFee: BN;
    referralFee: BN;
}
interface FeeMode {
    feesOnInput: boolean;
    feesOnBaseToken: boolean;
    hasReferral: boolean;
}
interface QuoteResult {
    amountOut: BN;
    minimumAmountOut: BN;
    nextSqrtPrice: BN;
    fee: {
        trading: BN;
        protocol: BN;
        referral?: BN;
    };
    price: {
        beforeSwap: BN;
        afterSwap: BN;
    };
}
interface FeeOnAmountResult {
    amount: BN;
    protocolFee: BN;
    tradingFee: BN;
    referralFee: BN;
}
interface PrepareSwapParams {
    inputMint: PublicKey;
    outputMint: PublicKey;
    inputTokenProgram: PublicKey;
    outputTokenProgram: PublicKey;
}
interface SwapAmount {
    outputAmount: BN;
    nextSqrtPrice: BN;
}

declare class DynamicBondingCurveProgram {
    protected program: Program<DynamicBondingCurve>;
    protected connection: Connection;
    protected poolAuthority: PublicKey;
    protected commitment: Commitment;
    constructor(connection: Connection, commitment: Commitment);
    protected prepareTokenAccounts(owner: PublicKey, payer: PublicKey, tokenAMint: PublicKey, tokenBMint: PublicKey, tokenAProgram: PublicKey, tokenBProgram: PublicKey): Promise<{
        ataTokenA: PublicKey;
        ataTokenB: PublicKey;
        instructions: TransactionInstruction[];
    }>;
    /**
     * Get the underlying program instance
     * @returns The program instance
     */
    getProgram(): Program<DynamicBondingCurve>;
}

declare class PoolService extends DynamicBondingCurveProgram {
    private state;
    constructor(connection: Connection, commitment: Commitment);
    private initializeSplPool;
    private initializeToken2022Pool;
    /**
     * Prepare swap parameters
     * @param swapBaseForQuote - Whether to swap base for quote
     * @param virtualPoolState - The virtual pool state
     * @param poolConfigState - The pool config state
     * @returns The prepare swap parameters
     */
    private prepareSwapParams;
    /**
     * Create a new pool
     * @param createPoolParam - The parameters for the pool
     * @returns A new pool
     */
    createPool(createPoolParam: CreatePoolParam): Promise<Transaction>;
    /**
     * Create a new pool and buy tokens
     * @param createPoolBuyParam - The parameters for the pool and buy
     * @returns A transaction that creates the pool and buys tokens
     */
    createPoolAndBuy(createPoolBuyParam: CreatePoolAndBuyParam): Promise<Transaction>;
    /**
     * Swap between base and quote
     * @param pool - The pool address
     * @param swapParam - The parameters for the swap
     * @returns A swap transaction
     */
    swap(swapParam: SwapParam): Promise<Transaction>;
    /**
     * Calculate the amount out for a swap (quote)
     * @param virtualPool - The virtual pool
     * @param config - The config
     * @param swapBaseForQuote - Whether to swap base for quote
     * @param amountIn - The amount in
     * @param slippageBps - Slippage tolerance in basis points (100 = 1%)
     * @param hasReferral - Whether the referral is enabled
     * @param currentPoint - The current point
     * @returns The swap quote result
     */
    swapQuote(swapQuoteParam: SwapQuoteParam): Promise<QuoteResult>;
}

declare class MigrationService extends DynamicBondingCurveProgram {
    private state;
    constructor(connection: Connection, commitment: Commitment);
    /**
     * Get the vault program instance
     * @returns The vault program instance
     */
    private getVaultProgram;
    /**
     * Get the DAMM V1 program instance
     * @returns The DAMM V1 program instance
     */
    private getDammV1Program;
    /**
     * Create lock escrow
     * @param createLockerParam - The parameters for the lock escrow
     * @returns A create lock escrow transaction
     */
    createLocker(createLockerParam: CreateLockerParam): Promise<Transaction>;
    /**
     * Withdraw leftover
     * @param withdrawLeftoverParam - The parameters for the withdraw leftover
     * @returns A withdraw leftover transaction
     */
    withdrawLeftover(withdrawLeftoverParam: WithdrawLeftoverParam): Promise<Transaction>;
    /**
     * Create metadata for the migration of Meteora DAMM V1
     * @param createDammV1MigrationMetadataParam - The parameters for the migration
     * @returns A migration transaction
     */
    createDammV1MigrationMetadata(createDammV1MigrationMetadataParam: CreateDammV1MigrationMetadataParam): Promise<Transaction>;
    /**
     * Migrate to DAMM V1
     * @param migrateToDammV1Param - The parameters for the migration
     * @returns A migrate transaction
     */
    migrateToDammV1(migrateToDammV1Param: MigrateToDammV1Param): Promise<Transaction>;
    /**
     * Lock DAMM V1 LP token for creator or partner
     * @param lockDammV1LpTokenParam - The parameters for the lock
     * @returns A lock transaction
     */
    lockDammV1LpToken(lockDammV1LpTokenParam: DammLpTokenParam): Promise<Transaction>;
    /**
     * Claim DAMM V1 LP token for creator or partner
     * @param claimDammV1LpTokenParam - The parameters for the claim
     * @returns A claim transaction
     */
    claimDammV1LpToken(claimDammV1LpTokenParam: DammLpTokenParam): Promise<Transaction>;
    /**
     * Create metadata for the migration of Meteora DAMM V2
     * @param createDammV2MigrationMetadataParam - The parameters for the migration
     * @returns A migration transaction
     */
    createDammV2MigrationMetadata(createDammV2MigrationMetadataParam: CreateDammV2MigrationMetadataParam): Promise<Transaction>;
    /**
     * Migrate to DAMM V2
     * @param migrateToDammV2Param - The parameters for the migration
     * @returns A migrate transaction
     */
    migrateToDammV2(migrateToDammV2Param: MigrateToDammV2Param): Promise<MigrateToDammV2Response>;
}

declare class PartnerService extends DynamicBondingCurveProgram {
    private state;
    constructor(connection: Connection, commitment: Commitment);
    /**
     * Create a new config
     * @param createConfigParam - The parameters for the config
     * @returns A new config
     */
    createConfig(createConfigParam: CreateConfigParam): Promise<Transaction>;
    /**
     * Build curve and create a new custom constant product config
     * @param buildCurveAndCreateConfigParam - The parameters for the custom constant product config
     * @returns A new custom constant product config
     */
    buildCurveAndCreateConfig(buildCurveAndCreateConfigParam: BuildCurveAndCreateConfigParam): Promise<Transaction>;
    /**
     * Build curve by market cap and create a new custom constant product config
     * @param buildCurveAndCreateConfigByMarketCapParam - The parameters for the custom constant product config
     * @returns A new custom constant product config
     */
    buildCurveAndCreateConfigByMarketCap(buildCurveAndCreateConfigByMarketCapParam: BuildCurveAndCreateConfigByMarketCapParam): Promise<Transaction>;
    /**
     * Build a custom graph curve and create a new config
     * @param buildCurveGraphAndCreateConfigParam - The parameters for the custom constant product config
     * @returns A new custom constant product config
     */
    buildCurveGraphAndCreateConfig(buildCurveGraphAndCreateConfigParam: BuildCurveGraphAndCreateConfigParam): Promise<Transaction>;
    /**
     * Create partner metadata
     * @param createPartnerMetadataParam - The parameters for the partner metadata
     * @returns A create partner metadata transaction
     */
    createPartnerMetadata(createPartnerMetadataParam: CreatePartnerMetadataParam): Promise<Transaction>;
    /**
     * Claim trading fee
     * @param claimTradingFeeParam - The parameters for the claim trading fee
     * @returns A claim trading fee transaction
     */
    claimPartnerTradingFee(claimTradingFeeParam: ClaimTradingFeeParam): Promise<Transaction>;
    /**
     * Partner withdraw surplus
     * @param partnerWithdrawSurplusParam - The parameters for the partner withdraw surplus
     * @returns A partner withdraw surplus transaction
     */
    partnerWithdrawSurplus(partnerWithdrawSurplusParam: PartnerWithdrawSurplusParam): Promise<Transaction>;
}

declare class CreatorService extends DynamicBondingCurveProgram {
    private state;
    constructor(connection: Connection, commitment: Commitment);
    /**
     * Create virtual pool metadata
     * @param createVirtualPoolMetadataParam - The parameters for the virtual pool metadata
     * @returns A create virtual pool metadata transaction
     */
    createPoolMetadata(createVirtualPoolMetadataParam: CreateVirtualPoolMetadataParam): Promise<Transaction>;
    /**
     * Claim creator trading fee
     * @param claimCreatorTradingFeeParam - The parameters for the claim creator trading fee
     * @returns A claim creator trading fee transaction
     */
    claimCreatorTradingFee(claimCreatorTradingFeeParam: ClaimCreatorTradingFeeParam): Promise<Transaction>;
    /**
     * Withdraw creator surplus
     * @param creatorWithdrawSurplusParam - The parameters for the creator withdraw surplus
     * @returns A creator withdraw surplus transaction
     */
    creatorWithdrawSurplus(creatorWithdrawSurplusParam: CreatorWithdrawSurplusParam): Promise<Transaction>;
}

declare class StateService extends DynamicBondingCurveProgram {
    constructor(connection: Connection, commitment: Commitment);
    /**
     * Get pool config data (partner config)
     * @param configAddress - The address of the pool config key
     * @returns A pool config
     */
    getPoolConfig(configAddress: PublicKey | string): Promise<PoolConfig>;
    /**
     * Get all config keys
     * @returns An array of config key accounts
     */
    getPoolConfigs(): Promise<ProgramAccount<PoolConfig>[]>;
    /**
     * Get all config keys of an owner wallet address
     * @param owner - The owner of the config keys
     * @returns An array of config key accounts
     */
    getPoolConfigsByOwner(owner: PublicKey | string): Promise<ProgramAccount<PoolConfig>[]>;
    /**
     * Get virtual pool data
     * @param poolAddress - The address of the pool
     * @returns A virtual pool or null if not found
     */
    getPool(poolAddress: PublicKey | string): Promise<VirtualPool>;
    /**
     * Get all dynamic bonding curve pools
     * @returns Array of pool accounts with their addresses
     */
    getPools(): Promise<ProgramAccount<VirtualPool>[]>;
    /**
     * Get all dynamic bonding curve pools by config key address
     * @param configAddress - The address of the config key
     * @returns Array of pool accounts with their addresses
     */
    getPoolsByConfig(configAddress: PublicKey | string): Promise<ProgramAccount<VirtualPool>[]>;
    /**
     * Get pool migration quote threshold
     * @param poolAddress - The address of the pool
     * @returns The migration quote threshold
     */
    getPoolMigrationQuoteThreshold(poolAddress: PublicKey | string): Promise<BN$1>;
    /**
     * Get the progress of the curve by comparing current quote reserve to migration threshold
     * @param poolAddress - The address of the pool
     * @returns The progress as a ratio between 0 and 1
     */
    getPoolCurveProgress(poolAddress: PublicKey | string): Promise<number>;
    /**
     * Get pool metadata
     * @param poolAddress - The address of the pool
     * @returns A pool metadata
     */
    getPoolMetadata(poolAddress: PublicKey | string): Promise<VirtualPoolMetadata[]>;
    /**
     * Get partner metadata
     * @param partnerAddress - The address of the partner
     * @returns A partner metadata
     */
    getPartnerMetadata(walletAddress: PublicKey | string): Promise<PartnerMetadata[]>;
    /**
     * Get DAMM V1 lock escrow details
     * @param lockEscrowAddress - The address of the lock escrow
     * @returns A lock escrow account
     */
    getDammV1LockEscrow(lockEscrowAddress: PublicKey | string): Promise<LockEscrow | null>;
    /**
     * Get DAMM V1 migration metadata
     * @param poolAddress - The address of the DAMM V1 pool (on DBC)
     * @returns A DAMM V1 migration metadata
     */
    getDammV1MigrationMetadata(poolAddress: PublicKey | string): Promise<MeteoraDammMigrationMetadata>;
    /**
     * Get DAMM V2 migration metadata
     * @param poolAddress - The address of the DAMM V2 pool (on DBC)
     * @returns A DAMM V2 migration metadata
     */
    getDammV2MigrationMetadata(poolAddress: PublicKey | string): Promise<MeteoraDammV2MigrationMetadata>;
    /**
     * Get fee metrics for a specific pool
     * @param poolAddress - The address of the pool
     * @returns Object containing current and total fee metrics
     */
    getPoolFeeMetrics(poolAddress: PublicKey): Promise<{
        current: {
            partnerBaseFee: BN$1;
            partnerQuoteFee: BN$1;
            creatorBaseFee: BN$1;
            creatorQuoteFee: BN$1;
        };
        total: {
            totalTradingBaseFee: BN$1;
            totalTradingQuoteFee: BN$1;
        };
    }>;
    /**
     * Get fee metrics for a specific pool
     * @param poolAddress - The address of the pool
     * @returns Object containing current and total fee metrics
     */
    getPoolCreatorFeeMetrics(poolAddress: PublicKey): Promise<{
        creatorBaseFee: BN$1;
        creatorQuoteFee: BN$1;
    }>;
    /**
     * Get fee metrics for a specific pool
     * @param poolAddress - The address of the pool
     * @returns Object containing current and total fee metrics
     */
    getPoolPartnerFeeMetrics(poolAddress: PublicKey): Promise<{
        partnerBaseFee: BN$1;
        partnerQuoteFee: BN$1;
    }>;
    /**
     * Get all quote fees for pools linked to a specific config key
     * @param configAddress - The address of the pool config
     * @returns Array of pools with their quote fees
     */
    getPoolsQuoteFeesByConfig(configAddress: PublicKey): Promise<Array<{
        poolAddress: PublicKey;
        partnerQuoteFee: BN$1;
        creatorQuoteFee: BN$1;
        totalTradingQuoteFee: BN$1;
    }>>;
    /**
     * Get all base fees for pools linked to a specific config key
     * @param configAddress - The address of the pool config
     * @returns Array of pools with their base fees
     */
    getPoolsBaseFeesByConfig(configAddress: PublicKey): Promise<Array<{
        poolAddress: PublicKey;
        partnerBaseFee: BN$1;
        creatorBaseFee: BN$1;
        totalTradingBaseFee: BN$1;
    }>>;
    /**
     * Get token decimals for a particular mint
     * @param mintAddress - The mint address to get decimals for
     * @param tokenType - The token type (SPL = 0 or Token2022 = 1)
     * @returns The number of decimals for the token
     */
    getTokenDecimals(mintAddress: PublicKey | string, tokenType: TokenType): Promise<number>;
}

declare class DynamicBondingCurveClient {
    pool: PoolService;
    partner: PartnerService;
    creator: CreatorService;
    migration: MigrationService;
    state: StateService;
    commitment: Commitment;
    connection: Connection;
    constructor(connection: Connection, commitment: Commitment);
    /**
     * Static method to create a client instance for a specific pool
     * @param connection - The connection to the Solana network
     * @returns A DynamicBondingCurveClient instance
     */
    static create(connection: Connection, commitment?: Commitment): DynamicBondingCurveClient;
}

declare const OFFSET: number;
declare const U64_MAX: BN$1;
declare const MIN_SQRT_PRICE: BN$1;
declare const MAX_SQRT_PRICE: BN$1;
declare const RESOLUTION = 64;
declare const ONE_Q64: BN$1;
declare const FEE_DENOMINATOR = 1000000000;
declare const MAX_FEE_NUMERATOR = 500000000;
declare const BASIS_POINT_MAX = 10000;
declare const MAX_CURVE_POINT = 16;
declare const PARTNER_SURPLUS_SHARE = 80;
declare const SWAP_BUFFER_PERCENTAGE = 25;
declare const MAX_SWALLOW_PERCENTAGE = 20;
declare const DYNAMIC_BONDING_CURVE_PROGRAM_ID: PublicKey;
declare const METAPLEX_PROGRAM_ID: PublicKey;
declare const DAMM_V1_PROGRAM_ID: PublicKey;
declare const DAMM_V2_PROGRAM_ID: PublicKey;
declare const VAULT_PROGRAM_ID: PublicKey;
declare const LOCKER_PROGRAM_ID: PublicKey;
declare const BASE_ADDRESS: PublicKey;
declare const DYNAMIC_FEE_FILTER_PERIOD_DEFAULT = 10;
declare const DYNAMIC_FEE_DECAY_PERIOD_DEFAULT = 120;
declare const DYNAMIC_FEE_REDUCTION_FACTOR_DEFAULT = 5000;
declare const BIN_STEP_BPS_DEFAULT = 1;
declare const BIN_STEP_BPS_U128_DEFAULT: BN$1;
declare const MAX_PRICE_CHANGE_BPS_DEFAULT = 1500;

/**
 * Get the sqrt price from the price
 * @param price - The price
 * @param tokenADecimal - The decimal of token A
 * @param tokenBDecimal - The decimal of token B
 * @returns The sqrt price
 */
declare const getSqrtPriceFromPrice: (price: string, tokenADecimal: number, tokenBDecimal: number) => BN$1;
/**
 * Get the sqrt price from the market cap
 * @param marketCap - The market cap
 * @param totalSupply - The total supply
 * @param tokenBaseDecimal - The decimal of the base token
 * @param tokenQuoteDecimal - The decimal of the quote token
 * @returns The sqrt price
 */
declare const getSqrtPriceFromMarketCap: (marketCap: number, totalSupply: number, tokenBaseDecimal: number, tokenQuoteDecimal: number) => BN$1;
/**
 * Get the base token for swap
 * @param sqrtStartPrice - The start sqrt price
 * @param sqrtMigrationPrice - The migration sqrt price
 * @param curve - The curve
 * @returns The base token
 */
declare function getBaseTokenForSwap(sqrtStartPrice: BN$1, sqrtMigrationPrice: BN$1, curve: Array<LiquidityDistributionParameters>): BN$1;
/**
 * Calculates the amount of base token needed for a price range
 * @param lowerSqrtPrice - The lower sqrt price
 * @param upperSqrtPrice - The upper sqrt price
 * @param liquidity - The liquidity
 * @returns The delta amount base
 */
declare function getDeltaAmountBase(lowerSqrtPrice: BN$1, upperSqrtPrice: BN$1, liquidity: BN$1): BN$1;
/**
 * Get the base token for migration
 * @param migrationQuoteThreshold - The migration quote threshold
 * @param sqrtMigrationPrice - The migration sqrt price
 * @param migrationOption - The migration option
 * @returns The base token
 */
declare const getMigrationBaseToken: (migrationQuoteThreshold: BN$1, sqrtMigrationPrice: BN$1, migrationOption: MigrationOption) => BN$1;
/**
 * Get the total vesting amount
 * @param lockedVesting - The locked vesting
 * @returns The total vesting amount
 */
declare const getTotalVestingAmount: (lockedVesting: LockedVestingParameters) => BN$1;
/**
 * Get the liquidity
 * @param baseAmount - The base amount
 * @param quoteAmount - The quote amount
 * @param minSqrtPrice - The min sqrt price
 * @param maxSqrtPrice - The max sqrt price
 * @returns The liquidity
 */
declare const getLiquidity: (baseAmount: BN$1, quoteAmount: BN$1, minSqrtPrice: BN$1, maxSqrtPrice: BN$1) => BN$1;
/**
 * Get the first curve
 * @param migrationSqrPrice - The migration sqrt price
 * @param migrationAmount - The migration amount
 * @param swapAmount - The swap amount
 * @param migrationQuoteThreshold - The migration quote threshold
 * @returns The first curve
 */
declare const getFirstCurve: (migrationSqrPrice: BN$1, migrationAmount: BN$1, swapAmount: BN$1, migrationQuoteThreshold: BN$1) => {
    sqrtStartPrice: BN$1;
    curve: {
        sqrtPrice: BN$1;
        liquidity: BN$1;
    }[];
};
/**
 * Get the total supply from curve
 * @param migrationQuoteThreshold - The migration quote threshold
 * @param sqrtStartPrice - The start sqrt price
 * @param curve - The curve
 * @param lockedVesting - The locked vesting
 * @param migrationOption - The migration option
 * @returns The total supply
 */
declare const getTotalSupplyFromCurve: (migrationQuoteThreshold: BN$1, sqrtStartPrice: BN$1, curve: Array<LiquidityDistributionParameters>, lockedVesting: LockedVestingParameters, migrationOption: MigrationOption, leftover: BN$1) => BN$1;
/**
 * Get the migration threshold price
 * @param migrationThreshold - The migration threshold
 * @param sqrtStartPrice - The start sqrt price
 * @param curve - The curve
 * @returns The migration threshold price
 */
declare const getMigrationThresholdPrice: (migrationThreshold: BN$1, sqrtStartPrice: BN$1, curve: Array<LiquidityDistributionParameters>) => BN$1;
/**
 * Get the swap amount with buffer
 * @param swapBaseAmount - The swap base amount
 * @param sqrtStartPrice - The start sqrt price
 * @param curve - The curve
 * @returns The swap amount with buffer
 */
declare const getSwapAmountWithBuffer: (swapBaseAmount: BN$1, sqrtStartPrice: BN$1, curve: Array<LiquidityDistributionParameters>) => BN$1;
/**
 * Calculate the percentage of supply that should be allocated to initial liquidity
 * @param initialMarketCap - The initial market cap
 * @param migrationMarketCap - The migration market cap
 * @param lockedVesting - The locked vesting
 * @param totalTokenSupply - The total token supply
 * @returns The percentage of supply for initial liquidity
 */
declare const calculatePercentageSupplyOnMigration: (initialMarketCap: BN$1, migrationMarketCap: BN$1, lockedVesting: LockedVestingParameters, totalTokenSupply: BN$1) => number;
/**
 * Get the migration quote threshold
 * @param migrationMarketCap - The migration market cap
 * @param percentageSupplyOnMigration - The percentage of supply on migration
 * @returns The migration quote threshold
 */
declare const calculateMigrationQuoteThreshold: (migrationMarketCap: BN$1, percentageSupplyOnMigration: number) => number;
/**
 * Convert a decimal to a BN
 * @param value - The value
 * @returns The BN
 */
declare function convertDecimalToBN(value: Decimal): BN$1;
/**
 * Converts basis points (bps) to a fee numerator
 * 1 bps = 0.01% = 0.0001 in decimal
 *
 * @param bps - The value in basis points [1-10_000]
 * @returns The equivalent fee numerator
 */
declare function bpsToFeeNumerator(bps: number): BN$1;
/**
 * Converts a fee numerator back to basis points (bps)
 *
 * @param feeNumerator - The fee numerator to convert
 * @returns The equivalent value in basis points [1-10_000]
 */
declare function feeNumeratorToBps(feeNumerator: BN$1): number;
/**
 * Calculates base fee parameters for a fee scheduler system.
 * @param {number} maxBaseFeeBps - Maximum fee in basis points
 * @param {number} minBaseFeeBps - Minimum fee in basis points
 * @param {FeeSchedulerMode} feeSchedulerMode - Mode for fee reduction (Linear or Exponential)
 * @param {number} numberOfPeriod - Number of periods over which to schedule fee reduction
 * @param {BN} periodFrequency - Time interval between fee reductions
 *
 * @returns {BaseFee}
 */
declare function getBaseFeeParams(maxBaseFeeBps: number, minBaseFeeBps: number, feeSchedulerMode: FeeSchedulerMode, numberOfPeriod: number, totalDuration: number): BaseFee;
declare function getBaseFeeNumerator(feeSchedulerMode: FeeSchedulerMode, cliffFeeNumerator: BN$1, period: BN$1, reductionFactor: BN$1): BN$1;
/**
 * Get the minimum base fee in basis points
 * @param cliffFeeNumerator - The cliff fee numerator
 * @param numberOfPeriod - The number of period
 * @param reductionFactor - The reduction factor
 * @param feeSchedulerMode - The fee scheduler mode
 * @returns The minimum base fee in basis points
 */
declare function getMinBaseFeeBps(cliffFeeNumerator: number, numberOfPeriod: number, reductionFactor: number, feeSchedulerMode: FeeSchedulerMode): number;
/**
 * Get the dynamic fee parameters (20% of base fee)
 * @param baseFeeBps - The base fee in basis points
 * @param maxPriceChangeBps - The max price change in basis points
 * @returns The dynamic fee parameters
 */
declare function getDynamicFeeParams(baseFeeBps: number, maxPriceChangeBps?: number): DynamicFeeParameters;

/**
 * Derive the DAMM V1 event authority
 * @returns The event authority
 */
declare function deriveDammV1EventAuthority(): PublicKey;
/**
 * Derive the DAMM V2 event authority
 * @returns The event authority
 */
declare function deriveDammV2EventAuthority(): PublicKey;
/**
 * Derive the locker event authority
 * @returns The event authority
 */
declare function deriveLockerEventAuthority(): PublicKey;
/**
 * Derive the DBC pool authority
 * @returns The pool authority
 */
declare function deriveDbcPoolAuthority(): PublicKey;
/**
 * Derive the DAMM V1 pool authority
 * @returns The pool authority
 */
declare function deriveDammV1PoolAuthority(): PublicKey;
/**
 * Derive the DAMM V2 pool authority
 * @returns The pool authority
 */
declare function deriveDammV2PoolAuthority(): PublicKey;
/**
 * Derive the DBC pool address
 * @param quoteMint - The quote mint
 * @param baseMint - The base mint
 * @param config - The config
 * @returns The pool
 */
declare function deriveDbcPoolAddress(quoteMint: PublicKey, baseMint: PublicKey, config: PublicKey): PublicKey;
/**
 * Derive the DAMM V1 pool address
 * @param config - The config
 * @param tokenAMint - The token A mint
 * @param tokenBMint - The token B mint
 * @returns The DAMM V1 pool address
 */
declare function deriveDammV1PoolAddress(config: PublicKey, tokenAMint: PublicKey, tokenBMint: PublicKey): PublicKey;
/**
 * Derive the DAMM V2 pool address
 * @param config - The config
 * @param tokenAMint - The token A mint
 * @param tokenBMint - The token B mint
 * @returns The DAMM V2 pool address
 */
declare function deriveDammV2PoolAddress(config: PublicKey, tokenAMint: PublicKey, tokenBMint: PublicKey): PublicKey;
/**
 * Derive the mint metadata address
 * @param mint - The mint
 * @returns The mint metadata address
 */
declare function deriveMintMetadata(mint: PublicKey): PublicKey;
/**
 * Derive the partner metadata
 * @param feeClaimer - The fee claimer
 * @returns The partner metadata
 */
declare function derivePartnerMetadata(feeClaimer: PublicKey): PublicKey;
/**
 * Derive the DBC pool metadata
 * @param pool - The pool
 * @returns The DBC pool metadata
 */
declare function deriveDbcPoolMetadata(pool: PublicKey): PublicKey;
/**
 * Derive the DAMM migration metadata address
 * @param virtual_pool - The virtual pool
 * @param migrateToDammV2 - Whether to migrate to DAMM V2
 * @returns The DAMM migration metadata address
 */
declare function deriveDammV1MigrationMetadataAddress(virtual_pool: PublicKey): PublicKey;
/**
 * Derive the DAMM migration metadata address
 * @param virtual_pool - The virtual pool
 * @param migrateToDammV2 - Whether to migrate to DAMM V2
 * @returns The DAMM migration metadata address
 */
declare function deriveDammV2MigrationMetadataAddress(virtual_pool: PublicKey): PublicKey;
/**
 * Derive the token vault address
 * @param pool - The pool
 * @param mint - The mint
 * @returns The token vault
 */
declare function deriveDbcTokenVaultAddress(pool: PublicKey, mint: PublicKey): PublicKey;
/**
 * Derive the token vault address
 * @param pool - The pool
 * @param mint - The mint
 * @returns The token vault
 */
declare function deriveDammV2TokenVaultAddress(pool: PublicKey, mint: PublicKey): PublicKey;
/**
 * Derive the DAMM V1 vault LP address
 * @param vault - The vault
 * @param pool - The pool
 * @returns The vault LP address
 */
declare function deriveDammV1VaultLPAddress(vault: PublicKey, pool: PublicKey): PublicKey;
/**
 * Derive the vault address
 * @param mint - The mint
 * @param payer - The payer
 * @returns The vault address
 */
declare function deriveVaultAddress(mint: PublicKey, payer: PublicKey): PublicKey;
/**
 * Derive the vault PDAs
 * @param tokenMint - The token mint
 * @param seedBaseKey - The seed base key
 * @returns The vault PDAs
 */
declare const deriveVaultPdas: (tokenMint: PublicKey, seedBaseKey?: PublicKey) => {
    vaultPda: PublicKey;
    tokenVaultPda: PublicKey;
    lpMintPda: PublicKey;
};
/**
 * Derive the token vault key
 * @param vaultKey - The vault key
 * @returns The token vault key
 */
declare function deriveTokenVaultKey(vaultKey: PublicKey): PublicKey;
/**
 * Derive the LP mint address
 * @param pool - The pool
 * @returns The LP mint address
 */
declare function deriveVaultLpMintAddress(pool: PublicKey): PublicKey;
/**
 * Derive the LP mint address
 * @param pool - The pool
 * @returns The LP mint address
 */
declare function deriveDammV1LpMintAddress(pool: PublicKey): PublicKey;
/**
 * Derive the position address
 * @param positionNft - The position NFT
 * @returns The position address
 */
declare function derivePositionAddress(positionNft: PublicKey): PublicKey;
/**
 * Derive the position NFT account
 * @param positionNftMint - The position NFT mint
 * @returns The position NFT account
 */
declare function derivePositionNftAccount(positionNftMint: PublicKey): PublicKey;
/**
 * Derive the DAMM V1 lock escrow address
 * @param dammPool - The DAMM pool
 * @param creator - The creator of the virtual pool
 * @returns The lock escrow address
 */
declare function deriveDammV1LockEscrowAddress(dammPool: PublicKey, creator: PublicKey): PublicKey;
/**
 * Derive the DAMM V2 lock escrow address
 * @param dammPool - The DAMM pool
 * @param creator - The creator of the virtual pool
 * @returns The lock escrow address
 */
declare function deriveDammV2LockEscrowAddress(dammPool: PublicKey, creator: PublicKey): PublicKey;
/**
 * Derive the escrow address
 * @param base - The base mint
 * @returns The escrow address
 */
declare function deriveEscrow(base: PublicKey): PublicKey;
/**
 * Derive the protocol fee address
 * @param mint - The mint
 * @param pool - The pool
 * @returns The protocol fee address
 */
declare function deriveDammV1ProtocolFeeAddress(mint: PublicKey, pool: PublicKey): PublicKey;
/**
 * Derive the base key for the locker
 * @param virtualPool - The virtual pool
 * @returns The base key for the locker
 */
declare function deriveBaseKeyForLocker(virtualPool: PublicKey): PublicKey;

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/dynamic_vault.json`.
 */
type DynamicVault = {
    address: '24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi';
    metadata: {
        name: 'dynamicVault';
        version: '0.1.0';
        spec: '0.1.0';
        description: 'Created with Anchor';
    };
    docs: ['Program for vault'];
    instructions: [
        {
            name: 'initialize';
            docs: ['initialize new vault'];
            discriminator: [175, 175, 109, 31, 13, 152, 155, 237];
            accounts: [
                {
                    name: 'vault';
                    docs: [
                        'This is base account for all vault',
                        'No need base key now because we only allow 1 vault per token now',
                        'Vault account'
                    ];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [118, 97, 117, 108, 116];
                            },
                            {
                                kind: 'account';
                                path: 'tokenMint';
                            },
                            {
                                kind: 'const';
                                value: [
                                    245,
                                    105,
                                    223,
                                    222,
                                    32,
                                    35,
                                    51,
                                    89,
                                    141,
                                    199,
                                    215,
                                    75,
                                    29,
                                    148,
                                    184,
                                    98,
                                    71,
                                    121,
                                    193,
                                    248,
                                    47,
                                    30,
                                    37,
                                    166,
                                    91,
                                    110,
                                    78,
                                    248,
                                    163,
                                    190,
                                    155,
                                    155
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: ['Payer can be anyone'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenVault';
                    docs: ['Token vault account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'vault';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenMint';
                    docs: ['Token mint account'];
                },
                {
                    name: 'lpMint';
                    docs: ['LP mint account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [108, 112, 95, 109, 105, 110, 116];
                            },
                            {
                                kind: 'account';
                                path: 'vault';
                            }
                        ];
                    };
                },
                {
                    name: 'rent';
                    docs: ['rent'];
                    address: 'SysvarRent111111111111111111111111111111111';
                },
                {
                    name: 'tokenProgram';
                    docs: ['tokenProgram'];
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                },
                {
                    name: 'systemProgram';
                    docs: ['systemProgram'];
                    address: '11111111111111111111111111111111';
                }
            ];
            args: [];
        }
    ];
    accounts: [
        {
            name: 'vault';
            discriminator: [211, 8, 232, 43, 2, 152, 117, 119];
        }
    ];
    types: [
        {
            name: 'lockedProfitTracker';
            docs: ['LockedProfitTracker struct'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'lastUpdatedLockedProfit';
                        docs: ['The total locked profit from the last report'];
                        type: 'u64';
                    },
                    {
                        name: 'lastReport';
                        docs: ['The last timestamp (in seconds) rebalancing'];
                        type: 'u64';
                    },
                    {
                        name: 'lockedProfitDegradation';
                        docs: ['Rate per second of degradation'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'vault';
            docs: ['Vault struct'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'enabled';
                        docs: [
                            'The flag, if admin set enable = false, then the user can only withdraw and cannot deposit in the vault.'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'bumps';
                        docs: ['Vault nonce, to create vault seeds'];
                        type: {
                            defined: {
                                name: 'vaultBumps';
                            };
                        };
                    },
                    {
                        name: 'totalAmount';
                        docs: [
                            'The total liquidity of the vault, including remaining tokens in token_vault and the liquidity in all strategies.'
                        ];
                        type: 'u64';
                    },
                    {
                        name: 'tokenVault';
                        docs: ['Token account, hold liquidity in vault reserve'];
                        type: 'pubkey';
                    },
                    {
                        name: 'feeVault';
                        docs: [
                            'Hold lp token of vault, each time rebalance crank is called, vault calculate performance fee and mint corresponding lp token amount to fee_vault. fee_vault is owned by treasury address'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenMint';
                        docs: ['Token mint that vault supports'];
                        type: 'pubkey';
                    },
                    {
                        name: 'lpMint';
                        docs: ['Lp mint of vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'strategies';
                        docs: [
                            'The list of strategy addresses that vault supports, vault can support up to MAX_STRATEGY strategies at the same time.'
                        ];
                        type: {
                            array: ['pubkey', 30];
                        };
                    },
                    {
                        name: 'base';
                        docs: ['The base address to create vault seeds'];
                        type: 'pubkey';
                    },
                    {
                        name: 'admin';
                        docs: ['Admin of vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'operator';
                        docs: [
                            'Person who can send the crank. Operator can only send liquidity to strategies that admin defined, and claim reward to account of treasury address'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'lockedProfitTracker';
                        docs: ['Stores information for locked profit.'];
                        type: {
                            defined: {
                                name: 'lockedProfitTracker';
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'vaultBumps';
            docs: ['Vault bumps struct'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'vaultBump';
                        docs: ['vaultBump'];
                        type: 'u8';
                    },
                    {
                        name: 'tokenVaultBump';
                        docs: ['tokenVaultBump'];
                        type: 'u8';
                    }
                ];
            };
        }
    ];
};

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/dynamic_amm.json`.
 */
/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/dynamic_amm.json`.
 */
type DammV1 = {
    address: 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB';
    metadata: {
        name: 'dynamicAmm';
        version: '0.1.0';
        spec: '0.1.0';
        description: 'Created with Anchor';
    };
    docs: ['Program for AMM'];
    instructions: [
        {
            name: 'claimFee';
            docs: ['Claim fee'];
            discriminator: [169, 32, 79, 137, 136, 232, 70, 137];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'lpMint';
                    writable: true;
                },
                {
                    name: 'lockEscrow';
                    writable: true;
                },
                {
                    name: 'owner';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'sourceTokens';
                    writable: true;
                },
                {
                    name: 'escrowVault';
                    writable: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'aTokenVault';
                    writable: true;
                },
                {
                    name: 'bTokenVault';
                    writable: true;
                },
                {
                    name: 'aVault';
                    writable: true;
                },
                {
                    name: 'bVault';
                    writable: true;
                },
                {
                    name: 'aVaultLp';
                    writable: true;
                },
                {
                    name: 'bVaultLp';
                    writable: true;
                },
                {
                    name: 'aVaultLpMint';
                    writable: true;
                },
                {
                    name: 'bVaultLpMint';
                    writable: true;
                },
                {
                    name: 'userAToken';
                    writable: true;
                },
                {
                    name: 'userBToken';
                    writable: true;
                },
                {
                    name: 'vaultProgram';
                }
            ];
            args: [
                {
                    name: 'maxAmount';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'createLockEscrow';
            docs: ['Create lock account'];
            discriminator: [54, 87, 165, 19, 69, 227, 218, 224];
            accounts: [
                {
                    name: 'pool';
                },
                {
                    name: 'lockEscrow';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    108,
                                    111,
                                    99,
                                    107,
                                    95,
                                    101,
                                    115,
                                    99,
                                    114,
                                    111,
                                    119
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            },
                            {
                                kind: 'account';
                                path: 'owner';
                            }
                        ];
                    };
                },
                {
                    name: 'owner';
                },
                {
                    name: 'lpMint';
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                }
            ];
            args: [];
        },
        {
            name: 'initializePermissionlessConstantProductPoolWithConfig2';
            docs: ['Initialize permissionless pool with config 2'];
            discriminator: [48, 149, 220, 130, 61, 11, 9, 178];
            accounts: [
                {
                    name: 'pool';
                    docs: ['Pool account (PDA address)'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'tokenAMint';
                            },
                            {
                                kind: 'account';
                                path: 'tokenBMint';
                            },
                            {
                                kind: 'account';
                                path: 'config';
                            }
                        ];
                    };
                },
                {
                    name: 'config';
                },
                {
                    name: 'lpMint';
                    docs: ['LP token mint of the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [108, 112, 95, 109, 105, 110, 116];
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenAMint';
                    docs: ['Token A mint of the pool. Eg: USDT'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['Token B mint of the pool. Eg: USDC'];
                },
                {
                    name: 'aVault';
                    writable: true;
                },
                {
                    name: 'bVault';
                    writable: true;
                },
                {
                    name: 'aTokenVault';
                    docs: ['Token vault account of vault A'];
                    writable: true;
                },
                {
                    name: 'bTokenVault';
                    docs: ['Token vault account of vault B'];
                    writable: true;
                },
                {
                    name: 'aVaultLpMint';
                    docs: ['LP token mint of vault A'];
                    writable: true;
                },
                {
                    name: 'bVaultLpMint';
                    docs: ['LP token mint of vault B'];
                    writable: true;
                },
                {
                    name: 'aVaultLp';
                    docs: [
                        'LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.'
                    ];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'aVault';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'bVaultLp';
                    docs: [
                        'LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.'
                    ];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'bVault';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'payerTokenA';
                    docs: [
                        'Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.'
                    ];
                    writable: true;
                },
                {
                    name: 'payerTokenB';
                    docs: [
                        'Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.'
                    ];
                    writable: true;
                },
                {
                    name: 'payerPoolLp';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'account';
                                path: 'payer';
                            },
                            {
                                kind: 'const';
                                value: [
                                    6,
                                    221,
                                    246,
                                    225,
                                    215,
                                    101,
                                    161,
                                    147,
                                    217,
                                    203,
                                    225,
                                    70,
                                    206,
                                    235,
                                    121,
                                    172,
                                    28,
                                    180,
                                    133,
                                    237,
                                    95,
                                    91,
                                    55,
                                    145,
                                    58,
                                    140,
                                    245,
                                    133,
                                    126,
                                    255,
                                    0,
                                    169
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'lpMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'protocolTokenAFee';
                    docs: [
                        'Protocol fee token account for token A. Used to receive trading fee.'
                    ];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [102, 101, 101];
                            },
                            {
                                kind: 'account';
                                path: 'tokenAMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'protocolTokenBFee';
                    docs: [
                        'Protocol fee token account for token B. Used to receive trading fee.'
                    ];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [102, 101, 101];
                            },
                            {
                                kind: 'account';
                                path: 'tokenBMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: [
                        'Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.'
                    ];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'rent';
                    docs: ['Rent account.'];
                    address: 'SysvarRent111111111111111111111111111111111';
                },
                {
                    name: 'mintMetadata';
                    writable: true;
                },
                {
                    name: 'metadataProgram';
                },
                {
                    name: 'vaultProgram';
                },
                {
                    name: 'tokenProgram';
                    docs: ['Token program.'];
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                },
                {
                    name: 'associatedTokenProgram';
                    docs: ['Associated token program.'];
                    address: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';
                },
                {
                    name: 'systemProgram';
                    docs: ['System program.'];
                    address: '11111111111111111111111111111111';
                }
            ];
            args: [
                {
                    name: 'tokenAAmount';
                    type: 'u64';
                },
                {
                    name: 'tokenBAmount';
                    type: 'u64';
                },
                {
                    name: 'activationPoint';
                    type: {
                        option: 'u64';
                    };
                }
            ];
        },
        {
            name: 'lock';
            docs: ['Lock Lp token'];
            discriminator: [21, 19, 208, 43, 237, 62, 255, 87];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'lpMint';
                },
                {
                    name: 'lockEscrow';
                    writable: true;
                },
                {
                    name: 'owner';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'sourceTokens';
                    writable: true;
                },
                {
                    name: 'escrowVault';
                    writable: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'aVault';
                },
                {
                    name: 'bVault';
                },
                {
                    name: 'aVaultLp';
                },
                {
                    name: 'bVaultLp';
                },
                {
                    name: 'aVaultLpMint';
                },
                {
                    name: 'bVaultLpMint';
                }
            ];
            args: [
                {
                    name: 'amount';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'partnerClaimFee';
            docs: ['Partner claim fee'];
            discriminator: [57, 53, 176, 30, 123, 70, 52, 64];
            accounts: [
                {
                    name: 'pool';
                    docs: ['Pool account (PDA)'];
                    writable: true;
                },
                {
                    name: 'aVaultLp';
                    relations: ['pool'];
                },
                {
                    name: 'protocolTokenAFee';
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'protocolTokenBFee';
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'partnerTokenA';
                    writable: true;
                },
                {
                    name: 'partnerTokenB';
                    writable: true;
                },
                {
                    name: 'tokenProgram';
                    address: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                },
                {
                    name: 'partnerAuthority';
                    signer: true;
                }
            ];
            args: [
                {
                    name: 'maxAmountA';
                    type: 'u64';
                },
                {
                    name: 'maxAmountB';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'swap';
            docs: [
                'Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool.'
            ];
            discriminator: [248, 198, 158, 145, 225, 117, 135, 200];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'userSourceToken';
                    writable: true;
                },
                {
                    name: 'userDestinationToken';
                    writable: true;
                },
                {
                    name: 'aVault';
                    writable: true;
                },
                {
                    name: 'bVault';
                    writable: true;
                },
                {
                    name: 'aTokenVault';
                    writable: true;
                },
                {
                    name: 'bTokenVault';
                    writable: true;
                },
                {
                    name: 'aVaultLpMint';
                    writable: true;
                },
                {
                    name: 'bVaultLpMint';
                    writable: true;
                },
                {
                    name: 'aVaultLp';
                    writable: true;
                },
                {
                    name: 'bVaultLp';
                    writable: true;
                },
                {
                    name: 'protocolTokenFee';
                    writable: true;
                },
                {
                    name: 'user';
                    signer: true;
                },
                {
                    name: 'vaultProgram';
                },
                {
                    name: 'tokenProgram';
                }
            ];
            args: [
                {
                    name: 'inAmount';
                    type: 'u64';
                },
                {
                    name: 'minimumOutAmount';
                    type: 'u64';
                }
            ];
        }
    ];
    accounts: [
        {
            name: 'config';
            discriminator: [155, 12, 170, 224, 30, 250, 204, 130];
        },
        {
            name: 'pool';
            discriminator: [241, 154, 109, 4, 17, 177, 109, 188];
        }
    ];
    types: [
        {
            name: 'bootstrapping';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'activationPoint';
                        docs: ['Activation point, can be slot or timestamp'];
                        type: 'u64';
                    },
                    {
                        name: 'whitelistedVault';
                        docs: [
                            'Whitelisted vault to be able to buy pool before open slot'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreator';
                        type: 'pubkey';
                    },
                    {
                        name: 'activationType';
                        docs: [
                            'Activation type, 0 means by slot, 1 means by timestamp'
                        ];
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'config';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFees';
                            };
                        };
                    },
                    {
                        name: 'activationDuration';
                        type: 'u64';
                    },
                    {
                        name: 'vaultConfigKey';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreatorAuthority';
                        type: 'pubkey';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'partnerFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 219];
                        };
                    }
                ];
            };
        },
        {
            name: 'curveType';
            docs: ['Type of the swap curve'];
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'constantProduct';
                    },
                    {
                        name: 'stable';
                        fields: [
                            {
                                name: 'amp';
                                docs: ['Amplification coefficient'];
                                type: 'u64';
                            },
                            {
                                name: 'tokenMultiplier';
                                docs: [
                                    'Multiplier for the pool token. Used to normalized token with different decimal into the same precision.'
                                ];
                                type: {
                                    defined: {
                                        name: 'tokenMultiplier';
                                    };
                                };
                            },
                            {
                                name: 'depeg';
                                docs: [
                                    'Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price'
                                ];
                                type: {
                                    defined: {
                                        name: 'depeg';
                                    };
                                };
                            },
                            {
                                name: 'lastAmpUpdatedTimestamp';
                                docs: [
                                    'The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period'
                                ];
                                type: 'u64';
                            }
                        ];
                    }
                ];
            };
        },
        {
            name: 'depeg';
            docs: ['Contains information for depeg pool'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseVirtualPrice';
                        docs: [
                            'The virtual price of staking / interest bearing token'
                        ];
                        type: 'u64';
                    },
                    {
                        name: 'baseCacheUpdated';
                        docs: [
                            'The virtual price of staking / interest bearing token'
                        ];
                        type: 'u64';
                    },
                    {
                        name: 'depegType';
                        docs: ['Type of the depeg pool'];
                        type: {
                            defined: {
                                name: 'depegType';
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'depegType';
            docs: ['Type of depeg pool'];
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'none';
                    },
                    {
                        name: 'marinade';
                    },
                    {
                        name: 'lido';
                    },
                    {
                        name: 'splStake';
                    }
                ];
            };
        },
        {
            name: 'padding';
            docs: ['Padding for future pool fields'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'padding0';
                        docs: ['Padding 0'];
                        type: {
                            array: ['u8', 6];
                        };
                    },
                    {
                        name: 'padding1';
                        docs: ['Padding 1'];
                        type: {
                            array: ['u64', 21];
                        };
                    },
                    {
                        name: 'padding2';
                        docs: ['Padding 2'];
                        type: {
                            array: ['u64', 21];
                        };
                    }
                ];
            };
        },
        {
            name: 'partnerInfo';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'feeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'partnerAuthority';
                        type: 'pubkey';
                    },
                    {
                        name: 'pendingFeeA';
                        type: 'u64';
                    },
                    {
                        name: 'pendingFeeB';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'pool';
            docs: ['State of pool account'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'lpMint';
                        docs: ['LP token mint of the pool'];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenAMint';
                        docs: ['Token A mint of the pool. Eg: USDT'];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBMint';
                        docs: ['Token B mint of the pool. Eg: USDC'];
                        type: 'pubkey';
                    },
                    {
                        name: 'aVault';
                        docs: [
                            'Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'bVault';
                        docs: [
                            'Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'aVaultLp';
                        docs: [
                            'LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'bVaultLp';
                        docs: [
                            'LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'aVaultLpBump';
                        docs: [
                            '"A" vault lp bump. Used to create signer seeds.'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'enabled';
                        docs: [
                            'Flag to determine whether the pool is enabled, or disabled.'
                        ];
                        type: 'bool';
                    },
                    {
                        name: 'protocolTokenAFee';
                        docs: [
                            'Protocol fee token account for token A. Used to receive trading fee.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'protocolTokenBFee';
                        docs: [
                            'Protocol fee token account for token B. Used to receive trading fee.'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'feeLastUpdatedAt';
                        docs: ['Fee last updated timestamp'];
                        type: 'u64';
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u8', 24];
                        };
                    },
                    {
                        name: 'fees';
                        docs: ['Store the fee charges setting.'];
                        type: {
                            defined: {
                                name: 'poolFees';
                            };
                        };
                    },
                    {
                        name: 'poolType';
                        docs: ['Pool type'];
                        type: {
                            defined: {
                                name: 'poolType';
                            };
                        };
                    },
                    {
                        name: 'stake';
                        docs: ['Stake pubkey of SPL stake pool'];
                        type: 'pubkey';
                    },
                    {
                        name: 'totalLockedLp';
                        docs: ['Total locked lp token'];
                        type: 'u64';
                    },
                    {
                        name: 'bootstrapping';
                        docs: ['Bootstrapping config'];
                        type: {
                            defined: {
                                name: 'bootstrapping';
                            };
                        };
                    },
                    {
                        name: 'partnerInfo';
                        type: {
                            defined: {
                                name: 'partnerInfo';
                            };
                        };
                    },
                    {
                        name: 'padding';
                        docs: ['Padding for future pool field'];
                        type: {
                            defined: {
                                name: 'padding';
                            };
                        };
                    },
                    {
                        name: 'curveType';
                        docs: [
                            'The type of the swap curve supported by the pool.'
                        ];
                        type: {
                            defined: {
                                name: 'curveType';
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFees';
            docs: ['Information regarding fee charges'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'tradeFeeNumerator';
                        docs: [
                            'Trade fees are extra token amounts that are held inside the token',
                            'accounts during a trade, making the value of liquidity tokens rise.',
                            'Trade fee numerator'
                        ];
                        type: 'u64';
                    },
                    {
                        name: 'tradeFeeDenominator';
                        docs: ['Trade fee denominator'];
                        type: 'u64';
                    },
                    {
                        name: 'protocolTradeFeeNumerator';
                        docs: [
                            'Owner trading fees are extra token amounts that are held inside the token',
                            'accounts during a trade, with the equivalent in pool tokens minted to',
                            'the owner of the program.',
                            'Owner trade fee numerator'
                        ];
                        type: 'u64';
                    },
                    {
                        name: 'protocolTradeFeeDenominator';
                        docs: ['Owner trade fee denominator'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'poolType';
            docs: ['Pool type'];
            type: {
                kind: 'enum';
                variants: [
                    {
                        name: 'permissioned';
                    },
                    {
                        name: 'permissionless';
                    }
                ];
            };
        },
        {
            name: 'tokenMultiplier';
            docs: [
                'Multiplier for the pool token. Used to normalized token with different decimal into the same precision.'
            ];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'tokenAMultiplier';
                        docs: ['Multiplier for token A of the pool.'];
                        type: 'u64';
                    },
                    {
                        name: 'tokenBMultiplier';
                        docs: ['Multiplier for token B of the pool.'];
                        type: 'u64';
                    },
                    {
                        name: 'precisionFactor';
                        docs: [
                            'Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.'
                        ];
                        type: 'u8';
                    }
                ];
            };
        }
    ];
};

/**
 * Get the first key
 * @param key1 - The first key
 * @param key2 - The second key
 * @returns The first key
 */
declare function getFirstKey(key1: PublicKey, key2: PublicKey): Buffer<ArrayBufferLike>;
/**
 * Get the second key
 * @param key1 - The first key
 * @param key2 - The second key
 * @returns The second key
 */
declare function getSecondKey(key1: PublicKey, key2: PublicKey): Buffer<ArrayBufferLike>;
/**
 * Get the token program for a given token type
 * @param tokenType - The token type
 * @returns The token program
 */
declare function getTokenProgram(tokenType: TokenType): PublicKey;
/**
 * Create a memcmp filter for owner-based filtering
 * @param owner - The owner public key or string
 * @param offset - The offset where the owner field is located in the account data
 * @returns A GetProgramAccountsFilter array with the owner filter
 */
declare function createProgramAccountFilter(owner: PublicKey | string, offset: number): GetProgramAccountsFilter[];
/**
 * Generic account fetch helper
 * @param accountAddress - The address of the account to fetch
 * @param accountType - The type of account to fetch from program.account
 * @returns The fetched account data
 */
declare function getAccountData<T>(accountAddress: PublicKey | string, accountType: keyof Program<DynamicBondingCurve>['account'], program: Program<DynamicBondingCurve>): Promise<T>;
/**
 * Get creation timestamp for an account
 * @param accountAddress - The address of the account
 * @param connection - The Solana connection instance
 * @returns The creation timestamp as a Date object, or undefined if not found
 */
declare function getAccountCreationTimestamp(accountAddress: PublicKey | string, connection: Connection): Promise<Date | undefined>;
/**
 * Get creation timestamps for multiple accounts
 * @param accountAddresses - Array of account addresses
 * @param connection - The Solana connection instance
 * @returns Array of creation timestamps corresponding to the input addresses
 */
declare function getAccountCreationTimestamps(accountAddresses: (PublicKey | string)[], connection: Connection): Promise<(Date | undefined)[]>;
/**
 * Check if a mint is the native SOL mint
 * @param mint - The mint to check
 * @returns Whether the mint is the native SOL mint
 */
declare function isNativeSol(mint: PublicKey): boolean;
/**
 * Get the total token supply
 * @param swapBaseAmount - The swap base amount
 * @param migrationBaseThreshold - The migration base threshold
 * @param lockedVestingParams - The locked vesting parameters
 * @returns The total token supply
 */
declare function getTotalTokenSupply(swapBaseAmount: BN$1, migrationBaseThreshold: BN$1, lockedVestingParams: {
    amountPerPeriod: BN$1;
    numberOfPeriod: BN$1;
    cliffUnlockAmount: BN$1;
}): BN$1;
/**
 * Check if the locked vesting is the default
 * @param lockedVesting - The locked vesting parameters
 * @returns true if the locked vesting is the default, false otherwise
 */
declare function isDefaultLockedVesting(lockedVesting: {
    amountPerPeriod: BN$1;
    cliffDurationFromMigrationTime: BN$1;
    frequency: BN$1;
    numberOfPeriod: BN$1;
    cliffUnlockAmount: BN$1;
}): boolean;
/**
 * Create a permissionless dynamic vault
 * @param mint - The mint of the vault
 * @param payer - The payer of the vault
 * @param vaultProgram - The vault program
 * @returns The vault key, token vault key, and lp mint key
 */
declare function createInitializePermissionlessDynamicVaultIx(mint: PublicKey, payer: PublicKey, vaultProgram: Program<DynamicVault>): Promise<{
    vaultKey: PublicKey;
    tokenVaultKey: PublicKey;
    lpMintKey: PublicKey;
    instruction: TransactionInstruction;
}>;
/**
 * Create a lock escrow instruction
 * @param connection - The connection to the Solana network
 * @param payer - The payer of the lock escrow
 * @param pool - The pool address
 * @param lpMint - The lp mint address
 * @param escrowOwner - The owner of the escrow
 * @param lockEscrowKey - The lock escrow key
 * @param dammV1Program - The DAMM V1 program
 * @returns The lock escrow instruction
 */
declare function createLockEscrowIx(payer: PublicKey, pool: PublicKey, lpMint: PublicKey, escrowOwner: PublicKey, lockEscrowKey: PublicKey, dammV1Program: Program<DammV1>): Promise<TransactionInstruction>;

/**
 * Validate the pool fees
 * @param poolFees - The pool fees
 * @returns true if the pool fees are valid, false otherwise
 */
declare function validatePoolFees(poolFees: any): boolean;
/**
 * Validate the collect fee mode
 * @param collectFeeMode - The collect fee mode
 * @returns true if the collect fee mode is valid, false otherwise
 */
declare function validateCollectFeeMode(collectFeeMode: CollectFeeMode): boolean;
/**
 * Validate the migration and token type
 * @param migrationOption - The migration option
 * @param tokenType - The token type
 * @returns true if the migration and token type are valid, false otherwise
 */
declare function validateMigrationAndTokenType(migrationOption: MigrationOption, tokenType: TokenType): boolean;
/**
 * Validate the activation type
 * @param activationType - The activation type
 * @returns true if the activation type is valid, false otherwise
 */
declare function validateActivationType(activationType: ActivationType): boolean;
/**
 * Validate the migration fee option
 * @param migrationFeeOption - The migration fee option
 * @returns true if the migration fee option is valid, false otherwise
 */
declare function validateMigrationFeeOption(migrationFeeOption: MigrationFeeOption): boolean;
/**
 * Validate the token decimals
 * @param tokenDecimal - The token decimal
 * @returns true if the token decimal is valid, false otherwise
 */
declare function validateTokenDecimals(tokenDecimal: TokenDecimal): boolean;
/**
 * Validate the LP percentages
 * @param partnerLpPercentage - The partner LP percentage
 * @param partnerLockedLpPercentage - The partner locked LP percentage
 * @param creatorLpPercentage - The creator LP percentage
 * @param creatorLockedLpPercentage - The creator locked LP percentage
 * @returns true if the LP percentages are valid, false otherwise
 */
declare function validateLPPercentages(partnerLpPercentage: number, partnerLockedLpPercentage: number, creatorLpPercentage: number, creatorLockedLpPercentage: number): boolean;
/**
 * Validate the curve
 * @param curve - The curve
 * @param sqrtStartPrice - The sqrt start price
 * @returns true if the curve is valid, false otherwise
 */
declare function validateCurve(curve: Array<{
    sqrtPrice: BN$1;
    liquidity: BN$1;
}>, sqrtStartPrice: BN$1): boolean;
/**
 * Validate the token supply
 * @param tokenSupply - The token supply
 * @param leftoverReceiver - The leftover receiver
 * @param swapBaseAmount - The swap base amount
 * @param migrationBaseAmount - The migration base amount
 * @param lockedVesting - The locked vesting parameters
 * @param swapBaseAmountBuffer - The swap base amount buffer
 * @returns true if the token supply is valid, false otherwise
 */
declare function validateTokenSupply(tokenSupply: any, leftoverReceiver: PublicKey, swapBaseAmount: BN$1, migrationBaseAmount: BN$1, lockedVesting: any, swapBaseAmountBuffer: BN$1): boolean;
/**
 * Validate the config parameters
 * @param configParam - The config parameters
 */
declare function validateConfigParameters(configParam: Omit<CreateConfigParam, 'config' | 'feeClaimer' | 'quoteMint' | 'payer'>): void;
/**
 * Validate that the base token type matches the pool config token type
 * @param baseTokenType - The base token type from create pool parameters
 * @param poolConfig - The pool config state
 * @returns true if the token types match, false otherwise
 */
declare function validateBaseTokenType(baseTokenType: TokenType, poolConfig: PoolConfig): boolean;
/**
 * Validate that the user has sufficient balance for the swap
 * @param balance - The current balance in lamports
 * @param amountIn - The input amount for the swap
 * @param isSOLInput - Whether the input token is SOL
 * @returns true if the balance is sufficient, throws error if insufficient
 */
/**
 * Validate that the user has sufficient balance for the swap
 * @param connection - The Solana connection
 * @param owner - The owner's public key
 * @param inputMint - The mint of the input token
 * @param amountIn - The input amount for the swap
 * @param inputTokenAccount - The token account to check balance for
 * @returns true if the balance is sufficient, throws error if insufficient
 */
declare function validateBalance(connection: Connection, owner: PublicKey, inputMint: PublicKey, amountIn: BN$1, inputTokenAccount: PublicKey): Promise<boolean>;
/**
 * Validate that the swap amount is valid
 * @param amountIn - The input amount for the swap
 * @returns true if the amount is valid, throws error if invalid
 */
declare function validateSwapAmount(amountIn: BN$1): boolean;

/**
 * Build a custom constant product curve
 * @param buildCurveParam - The parameters for the custom constant product curve
 * @returns The build custom constant product curve
 */
declare function buildCurve(buildCurveParam: BuildCurveParam): ConfigParameters;
/**
 * Build a custom constant product curve by market cap
 * @param buildCurveByMarketCapParam - The parameters for the custom constant product curve by market cap
 * @returns The build custom constant product curve by market cap
 */
declare function buildCurveByMarketCap(buildCurveByMarketCapParam: BuildCurveByMarketCapParam): ConfigParameters;
declare function buildCurveGraph(buildCurveGraphParam: BuildCurveGraphParam): ConfigParameters;

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/cp_amm.json`.
 */
type DammV2 = {
    address: 'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG';
    metadata: {
        name: 'cpAmm';
        version: '0.1.0';
        spec: '0.1.0';
        description: 'Created with Anchor';
    };
    instructions: [
        {
            name: 'addLiquidity';
            discriminator: [181, 157, 89, 67, 143, 182, 52, 72];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The user token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The user token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'addLiquidityParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'claimPartnerFee';
            discriminator: [97, 206, 39, 105, 94, 94, 126, 148];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The treasury token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The treasury token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'partner';
                    signer: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'maxAmountA';
                    type: 'u64';
                },
                {
                    name: 'maxAmountB';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'claimPositionFee';
            discriminator: [180, 38, 154, 17, 133, 33, 162, 211];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The user token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The user token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'claimProtocolFee';
            discriminator: [165, 228, 133, 48, 99, 249, 255, 33];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The treasury token a account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    153,
                                    10,
                                    107,
                                    154,
                                    255,
                                    249,
                                    210,
                                    173,
                                    176,
                                    67,
                                    220,
                                    214,
                                    152,
                                    71,
                                    46,
                                    146,
                                    161,
                                    33,
                                    81,
                                    148,
                                    166,
                                    119,
                                    5,
                                    189,
                                    142,
                                    11,
                                    57,
                                    68,
                                    162,
                                    70,
                                    126,
                                    100
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenAProgram';
                            },
                            {
                                kind: 'account';
                                path: 'tokenAMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The treasury token b account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    153,
                                    10,
                                    107,
                                    154,
                                    255,
                                    249,
                                    210,
                                    173,
                                    176,
                                    67,
                                    220,
                                    214,
                                    152,
                                    71,
                                    46,
                                    146,
                                    161,
                                    33,
                                    81,
                                    148,
                                    166,
                                    119,
                                    5,
                                    189,
                                    142,
                                    11,
                                    57,
                                    68,
                                    162,
                                    70,
                                    126,
                                    100
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenBProgram';
                            },
                            {
                                kind: 'account';
                                path: 'tokenBMint';
                            }
                        ];
                        program: {
                            kind: 'const';
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: 'claimFeeOperator';
                    docs: ['Claim fee operator'];
                },
                {
                    name: 'operator';
                    docs: ['Operator'];
                    signer: true;
                    relations: ['claimFeeOperator'];
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'claimReward';
            discriminator: [149, 95, 181, 242, 94, 90, 158, 162];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'rewardVault';
                    docs: ['The vault token account for reward token'];
                    writable: true;
                },
                {
                    name: 'rewardMint';
                },
                {
                    name: 'userTokenAccount';
                    writable: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'closeClaimFeeOperator';
            discriminator: [38, 134, 82, 216, 95, 124, 17, 99];
            accounts: [
                {
                    name: 'claimFeeOperator';
                    writable: true;
                },
                {
                    name: 'rentReceiver';
                    writable: true;
                },
                {
                    name: 'admin';
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'closeConfig';
            discriminator: [145, 9, 72, 157, 95, 125, 61, 85];
            accounts: [
                {
                    name: 'config';
                    writable: true;
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'rentReceiver';
                    writable: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'closePosition';
            discriminator: [123, 134, 81, 0, 49, 68, 98, 98];
            accounts: [
                {
                    name: 'positionNftMint';
                    docs: ['positionNftMint'];
                    writable: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                    writable: true;
                },
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'rentReceiver';
                    writable: true;
                },
                {
                    name: 'owner';
                    docs: ['Owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                    docs: [
                        'Program to create NFT mint/token account and transfer for token22 account'
                    ];
                    address: 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'createClaimFeeOperator';
            discriminator: [169, 62, 207, 107, 58, 187, 162, 109];
            accounts: [
                {
                    name: 'claimFeeOperator';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    99,
                                    102,
                                    95,
                                    111,
                                    112,
                                    101,
                                    114,
                                    97,
                                    116,
                                    111,
                                    114
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'operator';
                            }
                        ];
                    };
                },
                {
                    name: 'operator';
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'createConfig';
            docs: ['ADMIN FUNCTIONS /////'];
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189];
            accounts: [
                {
                    name: 'config';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [99, 111, 110, 102, 105, 103];
                            },
                            {
                                kind: 'arg';
                                path: 'config_parameters.index';
                            }
                        ];
                    };
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'configParameters';
                    type: {
                        defined: {
                            name: 'configParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'createPosition';
            discriminator: [48, 215, 197, 153, 96, 203, 180, 133];
            accounts: [
                {
                    name: 'owner';
                },
                {
                    name: 'positionNftMint';
                    docs: ['positionNftMint'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['position nft account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'position';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: [
                        'Address paying to create the position. Can be anyone'
                    ];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                    docs: [
                        'Program to create NFT mint/token account and transfer for token22 account'
                    ];
                    address: 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'createTokenBadge';
            discriminator: [88, 206, 0, 91, 60, 175, 151, 118];
            accounts: [
                {
                    name: 'tokenBadge';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    98,
                                    97,
                                    100,
                                    103,
                                    101
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenMint';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenMint';
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [];
        },
        {
            name: 'fundReward';
            discriminator: [188, 50, 249, 165, 93, 151, 38, 63];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'rewardVault';
                    writable: true;
                },
                {
                    name: 'rewardMint';
                },
                {
                    name: 'funderTokenAccount';
                    writable: true;
                },
                {
                    name: 'funder';
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                },
                {
                    name: 'amount';
                    type: 'u64';
                },
                {
                    name: 'carryForward';
                    type: 'bool';
                }
            ];
        },
        {
            name: 'initializeCustomizablePool';
            discriminator: [20, 161, 241, 24, 189, 221, 180, 2];
            accounts: [
                {
                    name: 'creator';
                },
                {
                    name: 'positionNftMint';
                    docs: ['positionNftMint'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['position nft account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: ['Address paying to create the pool. Can be anyone'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    docs: ['Initialize an account to store the pool state'];
                    writable: true;
                },
                {
                    name: 'position';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenAMint';
                    docs: ['Token a mint'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['Token b mint'];
                },
                {
                    name: 'tokenAVault';
                    docs: ['Token a vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenAMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenBVault';
                    docs: ['Token b vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenBMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'payerTokenA';
                    docs: ['payer token a account'];
                    writable: true;
                },
                {
                    name: 'payerTokenB';
                    docs: ['creator token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'token2022Program';
                    docs: [
                        'Program to create NFT mint/token account and transfer for token22 account'
                    ];
                    address: 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'initializeCustomizablePoolParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'initializePool';
            docs: ['USER FUNCTIONS ////'];
            discriminator: [95, 180, 10, 172, 84, 174, 232, 40];
            accounts: [
                {
                    name: 'creator';
                },
                {
                    name: 'positionNftMint';
                    docs: ['positionNftMint'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['position nft account'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'payer';
                    docs: ['Address paying to create the pool. Can be anyone'];
                    writable: true;
                    signer: true;
                },
                {
                    name: 'config';
                    docs: ['Which config the pool belongs to.'];
                },
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    docs: ['Initialize an account to store the pool state'];
                    writable: true;
                },
                {
                    name: 'position';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: 'account';
                                path: 'positionNftMint';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenAMint';
                    docs: ['Token a mint'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['Token b mint'];
                },
                {
                    name: 'tokenAVault';
                    docs: ['Token a vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenAMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'tokenBVault';
                    docs: ['Token b vault for the pool'];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    116,
                                    111,
                                    107,
                                    101,
                                    110,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'tokenBMint';
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            }
                        ];
                    };
                },
                {
                    name: 'payerTokenA';
                    docs: ['payer token a account'];
                    writable: true;
                },
                {
                    name: 'payerTokenB';
                    docs: ['creator token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Program to create mint account and mint tokens'];
                },
                {
                    name: 'token2022Program';
                    docs: [
                        'Program to create NFT mint/token account and transfer for token22 account'
                    ];
                    address: 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'initializePoolParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'initializeReward';
            discriminator: [95, 135, 192, 196, 242, 129, 230, 68];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'rewardVault';
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    114,
                                    101,
                                    119,
                                    97,
                                    114,
                                    100,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: 'account';
                                path: 'pool';
                            },
                            {
                                kind: 'arg';
                                path: 'rewardIndex';
                            }
                        ];
                    };
                },
                {
                    name: 'rewardMint';
                },
                {
                    name: 'admin';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                },
                {
                    name: 'rewardDuration';
                    type: 'u64';
                },
                {
                    name: 'funder';
                    type: 'pubkey';
                }
            ];
        },
        {
            name: 'lockPosition';
            discriminator: [227, 62, 2, 252, 247, 10, 171, 185];
            accounts: [
                {
                    name: 'pool';
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'vesting';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'payer';
                    writable: true;
                    signer: true;
                },
                {
                    name: 'systemProgram';
                    address: '11111111111111111111111111111111';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'vestingParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'permanentLockPosition';
            discriminator: [165, 176, 125, 6, 231, 171, 186, 213];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'permanentLockLiquidity';
                    type: 'u128';
                }
            ];
        },
        {
            name: 'refreshVesting';
            discriminator: [9, 94, 216, 14, 116, 204, 247, 0];
            accounts: [
                {
                    name: 'pool';
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                }
            ];
            args: [];
        },
        {
            name: 'removeAllLiquidity';
            discriminator: [10, 51, 61, 35, 112, 105, 24, 85];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The user token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The user token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'tokenAAmountThreshold';
                    type: 'u64';
                },
                {
                    name: 'tokenBAmountThreshold';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'removeLiquidity';
            discriminator: [80, 85, 209, 72, 24, 206, 177, 108];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                    relations: ['position'];
                },
                {
                    name: 'position';
                    writable: true;
                },
                {
                    name: 'tokenAAccount';
                    docs: ['The user token a account'];
                    writable: true;
                },
                {
                    name: 'tokenBAccount';
                    docs: ['The user token b account'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                    relations: ['pool'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                    relations: ['pool'];
                },
                {
                    name: 'positionNftAccount';
                    docs: ['The token account for nft'];
                },
                {
                    name: 'owner';
                    docs: ['owner of position'];
                    signer: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'removeLiquidityParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'setPoolStatus';
            discriminator: [112, 87, 135, 223, 83, 204, 132, 53];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'admin';
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'status';
                    type: 'u8';
                }
            ];
        },
        {
            name: 'swap';
            discriminator: [248, 198, 158, 145, 225, 117, 135, 200];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    docs: ['Pool account'];
                    writable: true;
                },
                {
                    name: 'inputTokenAccount';
                    docs: ['The user token account for input token'];
                    writable: true;
                },
                {
                    name: 'outputTokenAccount';
                    docs: ['The user token account for output token'];
                    writable: true;
                },
                {
                    name: 'tokenAVault';
                    docs: ['The vault token account for input token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenBVault';
                    docs: ['The vault token account for output token'];
                    writable: true;
                    relations: ['pool'];
                },
                {
                    name: 'tokenAMint';
                    docs: ['The mint of token a'];
                },
                {
                    name: 'tokenBMint';
                    docs: ['The mint of token b'];
                },
                {
                    name: 'payer';
                    docs: ['The user performing the swap'];
                    signer: true;
                },
                {
                    name: 'tokenAProgram';
                    docs: ['Token a program'];
                },
                {
                    name: 'tokenBProgram';
                    docs: ['Token b program'];
                },
                {
                    name: 'referralTokenAccount';
                    docs: ['referral token account'];
                    writable: true;
                    optional: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'params';
                    type: {
                        defined: {
                            name: 'swapParameters';
                        };
                    };
                }
            ];
        },
        {
            name: 'updateRewardDuration';
            discriminator: [138, 174, 196, 169, 213, 235, 254, 107];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'admin';
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                },
                {
                    name: 'newDuration';
                    type: 'u64';
                }
            ];
        },
        {
            name: 'updateRewardFunder';
            discriminator: [211, 28, 48, 32, 215, 160, 35, 23];
            accounts: [
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'admin';
                    signer: true;
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                },
                {
                    name: 'newFunder';
                    type: 'pubkey';
                }
            ];
        },
        {
            name: 'withdrawIneligibleReward';
            discriminator: [148, 206, 42, 195, 247, 49, 103, 8];
            accounts: [
                {
                    name: 'poolAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    112,
                                    111,
                                    111,
                                    108,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'pool';
                    writable: true;
                },
                {
                    name: 'rewardVault';
                    writable: true;
                },
                {
                    name: 'rewardMint';
                },
                {
                    name: 'funderTokenAccount';
                    writable: true;
                },
                {
                    name: 'funder';
                    signer: true;
                },
                {
                    name: 'tokenProgram';
                },
                {
                    name: 'eventAuthority';
                    pda: {
                        seeds: [
                            {
                                kind: 'const';
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: 'program';
                }
            ];
            args: [
                {
                    name: 'rewardIndex';
                    type: 'u8';
                }
            ];
        }
    ];
    accounts: [
        {
            name: 'claimFeeOperator';
            discriminator: [166, 48, 134, 86, 34, 200, 188, 150];
        },
        {
            name: 'config';
            discriminator: [155, 12, 170, 224, 30, 250, 204, 130];
        },
        {
            name: 'pool';
            discriminator: [241, 154, 109, 4, 17, 177, 109, 188];
        },
        {
            name: 'position';
            discriminator: [170, 188, 143, 228, 122, 64, 247, 208];
        },
        {
            name: 'tokenBadge';
            discriminator: [116, 219, 204, 229, 249, 116, 255, 150];
        },
        {
            name: 'vesting';
            discriminator: [100, 149, 66, 138, 95, 200, 128, 241];
        }
    ];
    events: [
        {
            name: 'evtAddLiquidity';
            discriminator: [175, 242, 8, 157, 30, 247, 185, 169];
        },
        {
            name: 'evtClaimPartnerFee';
            discriminator: [118, 99, 77, 10, 226, 1, 1, 87];
        },
        {
            name: 'evtClaimPositionFee';
            discriminator: [198, 182, 183, 52, 97, 12, 49, 56];
        },
        {
            name: 'evtClaimProtocolFee';
            discriminator: [186, 244, 75, 251, 188, 13, 25, 33];
        },
        {
            name: 'evtClaimReward';
            discriminator: [218, 86, 147, 200, 235, 188, 215, 231];
        },
        {
            name: 'evtCloseClaimFeeOperator';
            discriminator: [111, 39, 37, 55, 110, 216, 194, 23];
        },
        {
            name: 'evtCloseConfig';
            discriminator: [36, 30, 239, 45, 58, 132, 14, 5];
        },
        {
            name: 'evtClosePosition';
            discriminator: [20, 145, 144, 68, 143, 142, 214, 178];
        },
        {
            name: 'evtCreateClaimFeeOperator';
            discriminator: [21, 6, 153, 120, 68, 116, 28, 177];
        },
        {
            name: 'evtCreateConfig';
            discriminator: [131, 207, 180, 174, 180, 73, 165, 54];
        },
        {
            name: 'evtCreatePosition';
            discriminator: [156, 15, 119, 198, 29, 181, 221, 55];
        },
        {
            name: 'evtCreateTokenBadge';
            discriminator: [141, 120, 134, 116, 34, 28, 114, 160];
        },
        {
            name: 'evtFundReward';
            discriminator: [104, 233, 237, 122, 199, 191, 121, 85];
        },
        {
            name: 'evtInitializePool';
            discriminator: [228, 50, 246, 85, 203, 66, 134, 37];
        },
        {
            name: 'evtInitializeReward';
            discriminator: [129, 91, 188, 3, 246, 52, 185, 249];
        },
        {
            name: 'evtLockPosition';
            discriminator: [168, 63, 108, 83, 219, 82, 2, 200];
        },
        {
            name: 'evtPermanentLockPosition';
            discriminator: [145, 143, 162, 218, 218, 80, 67, 11];
        },
        {
            name: 'evtRemoveLiquidity';
            discriminator: [87, 46, 88, 98, 175, 96, 34, 91];
        },
        {
            name: 'evtSetPoolStatus';
            discriminator: [100, 213, 74, 3, 95, 91, 228, 146];
        },
        {
            name: 'evtSwap';
            discriminator: [27, 60, 21, 213, 138, 170, 187, 147];
        },
        {
            name: 'evtUpdateRewardDuration';
            discriminator: [149, 135, 65, 231, 129, 153, 65, 57];
        },
        {
            name: 'evtUpdateRewardFunder';
            discriminator: [76, 154, 208, 13, 40, 115, 246, 146];
        },
        {
            name: 'evtWithdrawIneligibleReward';
            discriminator: [248, 215, 184, 78, 31, 180, 179, 168];
        }
    ];
    errors: [
        {
            code: 6000;
            name: 'mathOverflow';
            msg: 'Math operation overflow';
        },
        {
            code: 6001;
            name: 'invalidFee';
            msg: 'Invalid fee setup';
        },
        {
            code: 6002;
            name: 'exceededSlippage';
            msg: 'Exceeded slippage tolerance';
        },
        {
            code: 6003;
            name: 'poolDisabled';
            msg: 'Pool disabled';
        },
        {
            code: 6004;
            name: 'exceedMaxFeeBps';
            msg: 'Exceeded max fee bps';
        },
        {
            code: 6005;
            name: 'invalidAdmin';
            msg: 'Invalid admin';
        },
        {
            code: 6006;
            name: 'amountIsZero';
            msg: 'Amount is zero';
        },
        {
            code: 6007;
            name: 'typeCastFailed';
            msg: 'Type cast error';
        },
        {
            code: 6008;
            name: 'unableToModifyActivationPoint';
            msg: 'Unable to modify activation point';
        },
        {
            code: 6009;
            name: 'invalidAuthorityToCreateThePool';
            msg: 'Invalid authority to create the pool';
        },
        {
            code: 6010;
            name: 'invalidActivationType';
            msg: 'Invalid activation type';
        },
        {
            code: 6011;
            name: 'invalidActivationPoint';
            msg: 'Invalid activation point';
        },
        {
            code: 6012;
            name: 'invalidQuoteMint';
            msg: 'Quote token must be SOL,USDC';
        },
        {
            code: 6013;
            name: 'invalidFeeCurve';
            msg: 'Invalid fee curve';
        },
        {
            code: 6014;
            name: 'invalidPriceRange';
            msg: 'Invalid Price Range';
        },
        {
            code: 6015;
            name: 'priceRangeViolation';
            msg: 'Trade is over price range';
        },
        {
            code: 6016;
            name: 'invalidParameters';
            msg: 'Invalid parameters';
        },
        {
            code: 6017;
            name: 'invalidCollectFeeMode';
            msg: 'Invalid collect fee mode';
        },
        {
            code: 6018;
            name: 'invalidInput';
            msg: 'Invalid input';
        },
        {
            code: 6019;
            name: 'cannotCreateTokenBadgeOnSupportedMint';
            msg: 'Cannot create token badge on supported mint';
        },
        {
            code: 6020;
            name: 'invalidTokenBadge';
            msg: 'Invalid token badge';
        },
        {
            code: 6021;
            name: 'invalidMinimumLiquidity';
            msg: 'Invalid minimum liquidity';
        },
        {
            code: 6022;
            name: 'invalidVestingInfo';
            msg: 'Invalid vesting information';
        },
        {
            code: 6023;
            name: 'insufficientLiquidity';
            msg: 'Insufficient liquidity';
        },
        {
            code: 6024;
            name: 'invalidVestingAccount';
            msg: 'Invalid vesting account';
        },
        {
            code: 6025;
            name: 'invalidPoolStatus';
            msg: 'Invalid pool status';
        },
        {
            code: 6026;
            name: 'unsupportNativeMintToken2022';
            msg: 'Unsupported native mint token2022';
        },
        {
            code: 6027;
            name: 'invalidRewardIndex';
            msg: 'Invalid reward index';
        },
        {
            code: 6028;
            name: 'invalidRewardDuration';
            msg: 'Invalid reward duration';
        },
        {
            code: 6029;
            name: 'rewardInitialized';
            msg: 'Reward already initialized';
        },
        {
            code: 6030;
            name: 'rewardUninitialized';
            msg: 'Reward not initialized';
        },
        {
            code: 6031;
            name: 'invalidRewardVault';
            msg: 'Invalid reward vault';
        },
        {
            code: 6032;
            name: 'mustWithdrawnIneligibleReward';
            msg: 'Must withdraw ineligible reward';
        },
        {
            code: 6033;
            name: 'identicalRewardDuration';
            msg: 'Reward duration is the same';
        },
        {
            code: 6034;
            name: 'rewardCampaignInProgress';
            msg: 'Reward campaign in progress';
        },
        {
            code: 6035;
            name: 'identicalFunder';
            msg: 'Identical funder';
        },
        {
            code: 6036;
            name: 'invalidFunder';
            msg: 'Invalid funder';
        },
        {
            code: 6037;
            name: 'rewardNotEnded';
            msg: 'Reward not ended';
        },
        {
            code: 6038;
            name: 'feeInverseIsIncorrect';
            msg: 'Fee inverse is incorrect';
        },
        {
            code: 6039;
            name: 'positionIsNotEmpty';
            msg: 'Position is not empty';
        }
    ];
    types: [
        {
            name: 'addLiquidityParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'liquidityDelta';
                        docs: ['delta liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'tokenAAmountThreshold';
                        docs: ['maximum token a amount'];
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmountThreshold';
                        docs: ['maximum token b amount'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'baseFeeConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'feeSchedulerMode';
                        type: 'u8';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 5];
                        };
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'baseFeeParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u64';
                    },
                    {
                        name: 'feeSchedulerMode';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'baseFeeStruct';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffFeeNumerator';
                        type: 'u64';
                    },
                    {
                        name: 'feeSchedulerMode';
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u8', 5];
                        };
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u64';
                    },
                    {
                        name: 'padding1';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'claimFeeOperator';
            docs: ['Parameter that set by the protocol'];
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'operator';
                        docs: ['operator'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['Reserve'];
                        type: {
                            array: ['u8', 128];
                        };
                    }
                ];
            };
        },
        {
            name: 'config';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'vaultConfigKey';
                        docs: ['Vault config key'];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreatorAuthority';
                        docs: [
                            "Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config."
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'poolFees';
                        docs: ['Pool fee'];
                        type: {
                            defined: {
                                name: 'poolFeesConfig';
                            };
                        };
                    },
                    {
                        name: 'activationType';
                        docs: ['Activation type'];
                        type: 'u8';
                    },
                    {
                        name: 'collectFeeMode';
                        docs: ['Collect fee mode'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding 0'];
                        type: {
                            array: ['u8', 6];
                        };
                    },
                    {
                        name: 'index';
                        docs: ['config index'];
                        type: 'u64';
                    },
                    {
                        name: 'sqrtMinPrice';
                        docs: ['sqrt min price'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        docs: ['sqrt max price'];
                        type: 'u128';
                    },
                    {
                        name: 'padding1';
                        docs: ['Fee curve point', 'Padding for further use'];
                        type: {
                            array: ['u64', 10];
                        };
                    }
                ];
            };
        },
        {
            name: 'configParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'sqrtMinPrice';
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        type: 'u128';
                    },
                    {
                        name: 'vaultConfigKey';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreatorAuthority';
                        type: 'pubkey';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'collectFeeMode';
                        type: 'u8';
                    },
                    {
                        name: 'index';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'dynamicFeeConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'initialized';
                        type: 'u8';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 7];
                        };
                    },
                    {
                        name: 'maxVolatilityAccumulator';
                        type: 'u32';
                    },
                    {
                        name: 'variableFeeControl';
                        type: 'u32';
                    },
                    {
                        name: 'binStep';
                        type: 'u16';
                    },
                    {
                        name: 'filterPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'decayPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u16';
                    },
                    {
                        name: 'padding1';
                        type: {
                            array: ['u8', 8];
                        };
                    },
                    {
                        name: 'binStepU128';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'dynamicFeeParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'binStep';
                        type: 'u16';
                    },
                    {
                        name: 'binStepU128';
                        type: 'u128';
                    },
                    {
                        name: 'filterPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'decayPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u16';
                    },
                    {
                        name: 'maxVolatilityAccumulator';
                        type: 'u32';
                    },
                    {
                        name: 'variableFeeControl';
                        type: 'u32';
                    }
                ];
            };
        },
        {
            name: 'dynamicFeeStruct';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'initialized';
                        type: 'u8';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 7];
                        };
                    },
                    {
                        name: 'maxVolatilityAccumulator';
                        type: 'u32';
                    },
                    {
                        name: 'variableFeeControl';
                        type: 'u32';
                    },
                    {
                        name: 'binStep';
                        type: 'u16';
                    },
                    {
                        name: 'filterPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'decayPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'reductionFactor';
                        type: 'u16';
                    },
                    {
                        name: 'lastUpdateTimestamp';
                        type: 'u64';
                    },
                    {
                        name: 'binStepU128';
                        type: 'u128';
                    },
                    {
                        name: 'sqrtPriceReference';
                        type: 'u128';
                    },
                    {
                        name: 'volatilityAccumulator';
                        type: 'u128';
                    },
                    {
                        name: 'volatilityReference';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'evtAddLiquidity';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'params';
                        type: {
                            defined: {
                                name: 'addLiquidityParameters';
                            };
                        };
                    },
                    {
                        name: 'tokenAAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmount';
                        type: 'u64';
                    },
                    {
                        name: 'totalAmountA';
                        type: 'u64';
                    },
                    {
                        name: 'totalAmountB';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimPartnerFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenAAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimPositionFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'feeAClaimed';
                        type: 'u64';
                    },
                    {
                        name: 'feeBClaimed';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimProtocolFee';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenAAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtClaimReward';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'mintReward';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardIndex';
                        type: 'u8';
                    },
                    {
                        name: 'totalReward';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtCloseClaimFeeOperator';
            docs: ['Close claim fee operator'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'claimFeeOperator';
                        type: 'pubkey';
                    },
                    {
                        name: 'operator';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCloseConfig';
            docs: ['Close config'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'config';
                        docs: ['Config pubkey'];
                        type: 'pubkey';
                    },
                    {
                        name: 'admin';
                        docs: ['admin pk'];
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtClosePosition';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'positionNftMint';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateClaimFeeOperator';
            docs: ['Create claim fee operator'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'operator';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateConfig';
            docs: ['Create config'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'vaultConfigKey';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolCreatorAuthority';
                        type: 'pubkey';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'sqrtMinPrice';
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        type: 'u128';
                    },
                    {
                        name: 'collectFeeMode';
                        type: 'u8';
                    },
                    {
                        name: 'index';
                        type: 'u64';
                    },
                    {
                        name: 'config';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreatePosition';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'positionNftMint';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtCreateTokenBadge';
            docs: ['Create token badge'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'tokenMint';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtFundReward';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'funder';
                        type: 'pubkey';
                    },
                    {
                        name: 'mintReward';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardIndex';
                        type: 'u8';
                    },
                    {
                        name: 'amount';
                        type: 'u64';
                    },
                    {
                        name: 'transferFeeExcludedAmountIn';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtInitializePool';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenAMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'creator';
                        type: 'pubkey';
                    },
                    {
                        name: 'payer';
                        type: 'pubkey';
                    },
                    {
                        name: 'alphaVault';
                        type: 'pubkey';
                    },
                    {
                        name: 'poolFees';
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'sqrtMinPrice';
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        type: 'u128';
                    },
                    {
                        name: 'activationType';
                        type: 'u8';
                    },
                    {
                        name: 'collectFeeMode';
                        type: 'u8';
                    },
                    {
                        name: 'liquidity';
                        type: 'u128';
                    },
                    {
                        name: 'sqrtPrice';
                        type: 'u128';
                    },
                    {
                        name: 'activationPoint';
                        type: 'u64';
                    },
                    {
                        name: 'tokenAFlag';
                        type: 'u8';
                    },
                    {
                        name: 'tokenBFlag';
                        type: 'u8';
                    },
                    {
                        name: 'tokenAAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmount';
                        type: 'u64';
                    },
                    {
                        name: 'totalAmountA';
                        type: 'u64';
                    },
                    {
                        name: 'totalAmountB';
                        type: 'u64';
                    },
                    {
                        name: 'poolType';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'evtInitializeReward';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'funder';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardIndex';
                        type: 'u8';
                    },
                    {
                        name: 'rewardDuration';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtLockPosition';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'vesting';
                        type: 'pubkey';
                    },
                    {
                        name: 'cliffPoint';
                        type: 'u64';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'cliffUnlockLiquidity';
                        type: 'u128';
                    },
                    {
                        name: 'liquidityPerPeriod';
                        type: 'u128';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    }
                ];
            };
        },
        {
            name: 'evtPermanentLockPosition';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'lockLiquidityAmount';
                        type: 'u128';
                    },
                    {
                        name: 'totalPermanentLockedLiquidity';
                        type: 'u128';
                    }
                ];
            };
        },
        {
            name: 'evtRemoveLiquidity';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'owner';
                        type: 'pubkey';
                    },
                    {
                        name: 'params';
                        type: {
                            defined: {
                                name: 'removeLiquidityParameters';
                            };
                        };
                    },
                    {
                        name: 'tokenAAmount';
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtSetPoolStatus';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'status';
                        type: 'u8';
                    }
                ];
            };
        },
        {
            name: 'evtSwap';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'tradeDirection';
                        type: 'u8';
                    },
                    {
                        name: 'hasReferral';
                        type: 'bool';
                    },
                    {
                        name: 'params';
                        type: {
                            defined: {
                                name: 'swapParameters';
                            };
                        };
                    },
                    {
                        name: 'swapResult';
                        type: {
                            defined: {
                                name: 'swapResult';
                            };
                        };
                    },
                    {
                        name: 'actualAmountIn';
                        type: 'u64';
                    },
                    {
                        name: 'currentTimestamp';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtUpdateRewardDuration';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardIndex';
                        type: 'u8';
                    },
                    {
                        name: 'oldRewardDuration';
                        type: 'u64';
                    },
                    {
                        name: 'newRewardDuration';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'evtUpdateRewardFunder';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardIndex';
                        type: 'u8';
                    },
                    {
                        name: 'oldFunder';
                        type: 'pubkey';
                    },
                    {
                        name: 'newFunder';
                        type: 'pubkey';
                    }
                ];
            };
        },
        {
            name: 'evtWithdrawIneligibleReward';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardMint';
                        type: 'pubkey';
                    },
                    {
                        name: 'amount';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'initializeCustomizablePoolParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        docs: ['pool fees'];
                        type: {
                            defined: {
                                name: 'poolFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'sqrtMinPrice';
                        docs: ['sqrt min price'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        docs: ['sqrt max price'];
                        type: 'u128';
                    },
                    {
                        name: 'hasAlphaVault';
                        docs: ['has alpha vault'];
                        type: 'bool';
                    },
                    {
                        name: 'liquidity';
                        docs: ['initialize liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtPrice';
                        docs: [
                            'The init price of the pool as a sqrt(token_b/token_a) Q64.64 value'
                        ];
                        type: 'u128';
                    },
                    {
                        name: 'activationType';
                        docs: ['activation type'];
                        type: 'u8';
                    },
                    {
                        name: 'collectFeeMode';
                        docs: ['collect fee mode'];
                        type: 'u8';
                    },
                    {
                        name: 'activationPoint';
                        docs: ['activation point'];
                        type: {
                            option: 'u64';
                        };
                    }
                ];
            };
        },
        {
            name: 'initializePoolParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'liquidity';
                        docs: ['initialize liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtPrice';
                        docs: [
                            'The init price of the pool as a sqrt(token_b/token_a) Q64.64 value'
                        ];
                        type: 'u128';
                    },
                    {
                        name: 'activationPoint';
                        docs: ['activation point'];
                        type: {
                            option: 'u64';
                        };
                    }
                ];
            };
        },
        {
            name: 'pool';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'poolFees';
                        docs: ['Pool fee'];
                        type: {
                            defined: {
                                name: 'poolFeesStruct';
                            };
                        };
                    },
                    {
                        name: 'tokenAMint';
                        docs: ['token a mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBMint';
                        docs: ['token b mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenAVault';
                        docs: ['token a vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'tokenBVault';
                        docs: ['token b vault'];
                        type: 'pubkey';
                    },
                    {
                        name: 'whitelistedVault';
                        docs: [
                            'Whitelisted vault to be able to buy pool before activation_point'
                        ];
                        type: 'pubkey';
                    },
                    {
                        name: 'partner';
                        docs: ['partner'];
                        type: 'pubkey';
                    },
                    {
                        name: 'liquidity';
                        docs: ['liquidity share'];
                        type: 'u128';
                    },
                    {
                        name: 'tokenAReserve';
                        docs: ['token a reserve'];
                        type: 'u64';
                    },
                    {
                        name: 'tokenBReserve';
                        docs: ['token b reserve'];
                        type: 'u64';
                    },
                    {
                        name: 'protocolAFee';
                        docs: ['protocol a fee'];
                        type: 'u64';
                    },
                    {
                        name: 'protocolBFee';
                        docs: ['protocol b fee'];
                        type: 'u64';
                    },
                    {
                        name: 'partnerAFee';
                        docs: ['partner a fee'];
                        type: 'u64';
                    },
                    {
                        name: 'partnerBFee';
                        docs: ['partner b fee'];
                        type: 'u64';
                    },
                    {
                        name: 'sqrtMinPrice';
                        docs: ['min price'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtMaxPrice';
                        docs: ['max price'];
                        type: 'u128';
                    },
                    {
                        name: 'sqrtPrice';
                        docs: ['current price'];
                        type: 'u128';
                    },
                    {
                        name: 'activationPoint';
                        docs: ['Activation point, can be slot or timestamp'];
                        type: 'u64';
                    },
                    {
                        name: 'activationType';
                        docs: [
                            'Activation type, 0 means by slot, 1 means by timestamp'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'poolStatus';
                        docs: ['pool status, 0: enable, 1 disable'];
                        type: 'u8';
                    },
                    {
                        name: 'tokenAFlag';
                        docs: ['token a flag'];
                        type: 'u8';
                    },
                    {
                        name: 'tokenBFlag';
                        docs: ['token b flag'];
                        type: 'u8';
                    },
                    {
                        name: 'collectFeeMode';
                        docs: [
                            '0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'poolType';
                        docs: ['pool type'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding'];
                        type: {
                            array: ['u8', 2];
                        };
                    },
                    {
                        name: 'feeAPerLiquidity';
                        docs: ['cumulative'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'feeBPerLiquidity';
                        docs: ['cumulative'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'permanentLockLiquidity';
                        type: 'u128';
                    },
                    {
                        name: 'metrics';
                        docs: ['metrics'];
                        type: {
                            defined: {
                                name: 'poolMetrics';
                            };
                        };
                    },
                    {
                        name: 'padding1';
                        docs: ['Padding for further use'];
                        type: {
                            array: ['u64', 10];
                        };
                    },
                    {
                        name: 'rewardInfos';
                        docs: ['Farming reward information'];
                        type: {
                            array: [
                                {
                                    defined: {
                                        name: 'rewardInfo';
                                    };
                                },
                                2
                            ];
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFeeParameters';
            docs: ['Information regarding fee charges'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseFee';
                        docs: ['Base fee'];
                        type: {
                            defined: {
                                name: 'baseFeeParameters';
                            };
                        };
                    },
                    {
                        name: 'protocolFeePercent';
                        docs: ['Protocol trade fee percent'];
                        type: 'u8';
                    },
                    {
                        name: 'partnerFeePercent';
                        docs: ['partner fee percent'];
                        type: 'u8';
                    },
                    {
                        name: 'referralFeePercent';
                        docs: ['referral fee percent'];
                        type: 'u8';
                    },
                    {
                        name: 'dynamicFee';
                        docs: ['dynamic fee'];
                        type: {
                            option: {
                                defined: {
                                    name: 'dynamicFeeParameters';
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFeesConfig';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseFee';
                        type: {
                            defined: {
                                name: 'baseFeeConfig';
                            };
                        };
                    },
                    {
                        name: 'dynamicFee';
                        type: {
                            defined: {
                                name: 'dynamicFeeConfig';
                            };
                        };
                    },
                    {
                        name: 'protocolFeePercent';
                        type: 'u8';
                    },
                    {
                        name: 'partnerFeePercent';
                        type: 'u8';
                    },
                    {
                        name: 'referralFeePercent';
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        type: {
                            array: ['u8', 5];
                        };
                    },
                    {
                        name: 'padding1';
                        type: {
                            array: ['u64', 5];
                        };
                    }
                ];
            };
        },
        {
            name: 'poolFeesStruct';
            docs: [
                'Information regarding fee charges',
                'trading_fee = amount * trade_fee_numerator / denominator',
                'protocol_fee = trading_fee * protocol_fee_percentage / 100',
                'referral_fee = protocol_fee * referral_percentage / 100',
                'partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator'
            ];
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'baseFee';
                        docs: [
                            'Trade fees are extra token amounts that are held inside the token',
                            'accounts during a trade, making the value of liquidity tokens rise.',
                            'Trade fee numerator'
                        ];
                        type: {
                            defined: {
                                name: 'baseFeeStruct';
                            };
                        };
                    },
                    {
                        name: 'protocolFeePercent';
                        docs: [
                            'Protocol trading fees are extra token amounts that are held inside the token',
                            'accounts during a trade, with the equivalent in pool tokens minted to',
                            'the protocol of the program.',
                            'Protocol trade fee numerator'
                        ];
                        type: 'u8';
                    },
                    {
                        name: 'partnerFeePercent';
                        docs: ['partner fee'];
                        type: 'u8';
                    },
                    {
                        name: 'referralFeePercent';
                        docs: ['referral fee'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding'];
                        type: {
                            array: ['u8', 5];
                        };
                    },
                    {
                        name: 'dynamicFee';
                        docs: ['dynamic fee'];
                        type: {
                            defined: {
                                name: 'dynamicFeeStruct';
                            };
                        };
                    },
                    {
                        name: 'padding1';
                        docs: ['padding'];
                        type: {
                            array: ['u64', 2];
                        };
                    }
                ];
            };
        },
        {
            name: 'poolMetrics';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'totalLpAFee';
                        type: 'u128';
                    },
                    {
                        name: 'totalLpBFee';
                        type: 'u128';
                    },
                    {
                        name: 'totalProtocolAFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalProtocolBFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalPartnerAFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalPartnerBFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalPosition';
                        type: 'u64';
                    },
                    {
                        name: 'padding';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'position';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'pool';
                        type: 'pubkey';
                    },
                    {
                        name: 'nftMint';
                        docs: ['nft mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'feeAPerTokenCheckpoint';
                        docs: ['fee a checkpoint'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'feeBPerTokenCheckpoint';
                        docs: ['fee b checkpoint'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'feeAPending';
                        docs: ['fee a pending'];
                        type: 'u64';
                    },
                    {
                        name: 'feeBPending';
                        docs: ['fee b pending'];
                        type: 'u64';
                    },
                    {
                        name: 'unlockedLiquidity';
                        docs: ['unlock liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'vestedLiquidity';
                        docs: ['vesting liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'permanentLockedLiquidity';
                        docs: ['permanent locked liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'metrics';
                        docs: ['metrics'];
                        type: {
                            defined: {
                                name: 'positionMetrics';
                            };
                        };
                    },
                    {
                        name: 'rewardInfos';
                        docs: ['Farming reward information'];
                        type: {
                            array: [
                                {
                                    defined: {
                                        name: 'userRewardInfo';
                                    };
                                },
                                2
                            ];
                        };
                    },
                    {
                        name: 'padding';
                        docs: ['padding for future usage'];
                        type: {
                            array: ['u128', 6];
                        };
                    }
                ];
            };
        },
        {
            name: 'positionMetrics';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'totalClaimedAFee';
                        type: 'u64';
                    },
                    {
                        name: 'totalClaimedBFee';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'removeLiquidityParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'liquidityDelta';
                        docs: ['delta liquidity'];
                        type: 'u128';
                    },
                    {
                        name: 'tokenAAmountThreshold';
                        docs: ['minimum token a amount'];
                        type: 'u64';
                    },
                    {
                        name: 'tokenBAmountThreshold';
                        docs: ['minimum token b amount'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'rewardInfo';
            docs: [
                'Stores the state relevant for tracking liquidity mining rewards'
            ];
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'initialized';
                        docs: ['Indicates if the reward has been initialized'];
                        type: 'u8';
                    },
                    {
                        name: 'rewardTokenFlag';
                        docs: ['reward token flag'];
                        type: 'u8';
                    },
                    {
                        name: 'padding0';
                        docs: ['padding'];
                        type: {
                            array: ['u8', 6];
                        };
                    },
                    {
                        name: 'padding1';
                        docs: [
                            'Padding to ensure `reward_rate: u128` is 16-byte aligned'
                        ];
                        type: {
                            array: ['u8', 8];
                        };
                    },
                    {
                        name: 'mint';
                        docs: ['Reward token mint.'];
                        type: 'pubkey';
                    },
                    {
                        name: 'vault';
                        docs: ['Reward vault token account.'];
                        type: 'pubkey';
                    },
                    {
                        name: 'funder';
                        docs: ['Authority account that allows to fund rewards'];
                        type: 'pubkey';
                    },
                    {
                        name: 'rewardDuration';
                        docs: ['reward duration'];
                        type: 'u64';
                    },
                    {
                        name: 'rewardDurationEnd';
                        docs: ['reward duration end'];
                        type: 'u64';
                    },
                    {
                        name: 'rewardRate';
                        docs: ['reward rate'];
                        type: 'u128';
                    },
                    {
                        name: 'rewardPerTokenStored';
                        docs: ['Reward per token stored'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'lastUpdateTime';
                        docs: ['The last time reward states were updated.'];
                        type: 'u64';
                    },
                    {
                        name: 'cumulativeSecondsWithEmptyLiquidityReward';
                        docs: [
                            'Accumulated seconds when the farm distributed rewards but the bin was empty.',
                            'These rewards will be carried over to the next reward time window.'
                        ];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'swapParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'amountIn';
                        type: 'u64';
                    },
                    {
                        name: 'minimumAmountOut';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'swapResult';
            docs: ['Encodes all results of swapping'];
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'outputAmount';
                        type: 'u64';
                    },
                    {
                        name: 'nextSqrtPrice';
                        type: 'u128';
                    },
                    {
                        name: 'lpFee';
                        type: 'u64';
                    },
                    {
                        name: 'protocolFee';
                        type: 'u64';
                    },
                    {
                        name: 'partnerFee';
                        type: 'u64';
                    },
                    {
                        name: 'referralFee';
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'tokenBadge';
            docs: ['Parameter that set by the protocol'];
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'tokenMint';
                        docs: ['token mint'];
                        type: 'pubkey';
                    },
                    {
                        name: 'padding';
                        docs: ['Reserve'];
                        type: {
                            array: ['u8', 128];
                        };
                    }
                ];
            };
        },
        {
            name: 'userRewardInfo';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'rewardPerTokenCheckpoint';
                        docs: ['The latest update reward checkpoint'];
                        type: {
                            array: ['u8', 32];
                        };
                    },
                    {
                        name: 'rewardPendings';
                        docs: ['Current pending rewards'];
                        type: 'u64';
                    },
                    {
                        name: 'totalClaimedRewards';
                        docs: ['Total claimed rewards'];
                        type: 'u64';
                    }
                ];
            };
        },
        {
            name: 'vesting';
            serialization: 'bytemuck';
            repr: {
                kind: 'c';
            };
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'position';
                        type: 'pubkey';
                    },
                    {
                        name: 'cliffPoint';
                        type: 'u64';
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'cliffUnlockLiquidity';
                        type: 'u128';
                    },
                    {
                        name: 'liquidityPerPeriod';
                        type: 'u128';
                    },
                    {
                        name: 'totalReleasedLiquidity';
                        type: 'u128';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    },
                    {
                        name: 'padding';
                        type: {
                            array: ['u8', 14];
                        };
                    },
                    {
                        name: 'padding2';
                        type: {
                            array: ['u128', 4];
                        };
                    }
                ];
            };
        },
        {
            name: 'vestingParameters';
            type: {
                kind: 'struct';
                fields: [
                    {
                        name: 'cliffPoint';
                        type: {
                            option: 'u64';
                        };
                    },
                    {
                        name: 'periodFrequency';
                        type: 'u64';
                    },
                    {
                        name: 'cliffUnlockLiquidity';
                        type: 'u128';
                    },
                    {
                        name: 'liquidityPerPeriod';
                        type: 'u128';
                    },
                    {
                        name: 'numberOfPeriod';
                        type: 'u16';
                    }
                ];
            };
        }
    ];
};

/**
 * Create a program instance
 * @param connection - The connection to the network
 * @returns The program instance
 */
declare function createDbcProgram(connection: Connection, commitment?: Commitment): {
    program: Program<DynamicBondingCurve>;
};
/**
 * Create a vault program instance
 * @param connection - The connection to the network
 * @returns The vault program instance
 */
declare function createVaultProgram(connection: Connection, commitment?: Commitment): Program<DynamicVault>;
/**
 * Create a DAMM V1 program instance
 * @param connection - The connection to the network
 * @returns The DAMM V1 program instance
 */
declare function createDammV1Program(connection: Connection, commitment?: Commitment): Program<DammV1>;
declare function createDammV2Program(connection: Connection, commitment?: Commitment): Program<DammV2>;

/**
 * Get or create an ATA instruction
 * @param connection - The connection
 * @param tokenMint - The token mint
 * @param owner - The owner
 * @param payer - The payer
 * @param allowOwnerOffCurve - Whether to allow the owner to be off curve
 * @param tokenProgram - The token program
 * @returns The ATA instruction
 */
declare const getOrCreateATAInstruction: (connection: Connection, tokenMint: PublicKey, owner: PublicKey, payer: PublicKey, allowOwnerOffCurve: boolean, tokenProgram: PublicKey) => Promise<{
    ataPubkey: PublicKey;
    ix?: TransactionInstruction;
}>;
/**
 * Create an unwrap SOL instruction
 * @param owner - The owner of the SOL
 * @param allowOwnerOffCurve - Whether to allow the owner to be off curve
 * @returns The unwrap SOL instruction
 */
declare function unwrapSOLInstruction(owner: PublicKey, allowOwnerOffCurve?: boolean): TransactionInstruction | null;
/**
 * Create a wrap SOL instruction
 * @param from - The from address
 * @param to - The to address
 * @param amount - The amount to wrap
 * @returns The wrap SOL instruction
 */
declare function wrapSOLInstruction(from: PublicKey, to: PublicKey, amount: bigint): TransactionInstruction[];
/**
 * Find the associated token address for a wallet and token mint
 * @param walletAddress - The wallet address
 * @param tokenMintAddress - The token mint address
 * @param tokenProgramId - The token program ID
 * @returns The associated token address
 */
declare function findAssociatedTokenAddress(walletAddress: PublicKey, tokenMintAddress: PublicKey, tokenProgramId: PublicKey): PublicKey;
/**
 * Get token decimals for a particular mint
 * @param mintAddress - The mint address to get decimals for
 * @returns The number of decimals for the token
 */
declare function getTokenDecimals(connection: Connection, mintAddress: PublicKey | string): Promise<number>;

/**
 * Gets the delta amount_base for given liquidity and price range
 * Formula: Δa = L * (1 / √P_lower - 1 / √P_upper)
 * i.e. L * (√P_upper - √P_lower) / (√P_upper * √P_lower)
 * @param lowerSqrtPrice Lower sqrt price
 * @param upperSqrtPrice Upper sqrt price
 * @param liquidity Liquidity
 * @param round Rounding direction
 * @returns Delta amount base
 */
declare function getDeltaAmountBaseUnsigned(lowerSqrtPrice: BN$1, upperSqrtPrice: BN$1, liquidity: BN$1, round: Rounding): BN$1;
/**
 * Gets the delta amount_quote for given liquidity and price range
 * Formula: Δb = L (√P_upper - √P_lower)
 * @param lowerSqrtPrice Lower sqrt price
 * @param upperSqrtPrice Upper sqrt price
 * @param liquidity Liquidity
 * @param round Rounding direction
 * @returns Delta amount quote
 */
declare function getDeltaAmountQuoteUnsigned(lowerSqrtPrice: BN$1, upperSqrtPrice: BN$1, liquidity: BN$1, round: Rounding): BN$1;
/**
 * Gets the next sqrt price given an input amount of token_a or token_b
 * @param sqrtPrice Current sqrt price
 * @param liquidity Liquidity
 * @param amountIn Input amount
 * @param baseForQuote Whether the input is base token for quote token
 * @returns Next sqrt price
 */
declare function getNextSqrtPriceFromInput(sqrtPrice: BN$1, liquidity: BN$1, amountIn: BN$1, baseForQuote: boolean): BN$1;
/**
 * Gets the next sqrt price from amount base rounding up
 * Formula: √P' = √P * L / (L + Δx * √P)
 * @param sqrtPrice Current sqrt price
 * @param liquidity Liquidity
 * @param amount Input amount
 * @returns Next sqrt price
 */
declare function getNextSqrtPriceFromAmountBaseRoundingUp(sqrtPrice: BN$1, liquidity: BN$1, amount: BN$1): BN$1;
/**
 * Gets the next sqrt price given a delta of token_quote
 * Formula: √P' = √P + Δy / L
 * @param sqrtPrice Current sqrt price
 * @param liquidity Liquidity
 * @param amount Input amount
 * @returns Next sqrt price
 */
declare function getNextSqrtPriceFromAmountQuoteRoundingDown(sqrtPrice: BN$1, liquidity: BN$1, amount: BN$1): BN$1;
/**
 * Gets the initial liquidity from delta quote
 * Formula: L = Δb / (√P_upper - √P_lower)
 * @param quoteAmount Quote amount
 * @param sqrtMinPrice Minimum sqrt price
 * @param sqrtPrice Current sqrt price
 * @returns Initial liquidity
 */
declare function getInitialLiquidityFromDeltaQuote(quoteAmount: BN$1, sqrtMinPrice: BN$1, sqrtPrice: BN$1): BN$1;
/**
 * Gets the initial liquidity from delta base
 * Formula: L = Δa / (1/√P_lower - 1/√P_upper)
 * @param baseAmount Base amount
 * @param sqrtMaxPrice Maximum sqrt price
 * @param sqrtPrice Current sqrt price
 * @returns Initial liquidity
 */
declare function getInitialLiquidityFromDeltaBase(baseAmount: BN$1, sqrtMaxPrice: BN$1, sqrtPrice: BN$1): BN$1;
/**
 * Gets the initialize amounts
 * @param sqrtMinPrice Minimum sqrt price
 * @param sqrtMaxPrice Maximum sqrt price
 * @param sqrtPrice Current sqrt price
 * @param liquidity Liquidity
 * @returns [base amount, quote amount]
 */
declare function getInitializeAmounts(sqrtMinPrice: BN$1, sqrtMaxPrice: BN$1, sqrtPrice: BN$1, liquidity: BN$1): [BN$1, BN$1];

/**
 * Get fee in period for exponential fee scheduler
 * @param cliffFeeNumerator Cliff fee numerator
 * @param reductionFactor Reduction factor
 * @param period Period
 * @returns Fee numerator
 */
declare function getFeeInPeriod(cliffFeeNumerator: BN$1, reductionFactor: BN$1, period: number): BN$1;
/**
 * Get current base fee numerator
 * @param baseFee Base fee parameters
 * @param currentPoint Current point
 * @param activationPoint Activation point
 * @returns Current base fee numerator
 */
declare function getCurrentBaseFeeNumerator(baseFee: {
    cliffFeeNumerator: BN$1;
    feeSchedulerMode: number;
    numberOfPeriod: number;
    periodFrequency: BN$1;
    reductionFactor: BN$1;
}, currentPoint: BN$1, activationPoint: BN$1): BN$1;
/**
 * Get fee on amount
 * @param amount Amount
 * @param poolFees Pool fees
 * @param isReferral Whether referral is used
 * @param currentPoint Current point
 * @param activationPoint Activation point
 * @returns Fee on amount result
 */
declare function getFeeOnAmount(amount: BN$1, poolFees: PoolFeesConfig, isReferral: boolean, currentPoint: BN$1, activationPoint: BN$1, volatilityTracker: VolatilityTracker): FeeOnAmountResult;
/**
 * Get variable fee from dynamic fee
 * @param dynamicFee Dynamic fee parameters
 * @returns Variable fee
 */
declare function getVariableFee(dynamicFee: DynamicFeeConfig, volatilityTracker: VolatilityTracker): BN$1;

/**
 * Get swap result
 * @param poolState Pool state
 * @param configState Config state
 * @param amountIn Input amount
 * @param feeMode Fee mode
 * @param tradeDirection Trade direction
 * @param currentPoint Current point
 * @returns Swap result
 */
declare function getSwapResult(poolState: VirtualPool, configState: PoolConfig, amountIn: BN$1, feeMode: FeeMode, tradeDirection: TradeDirection, currentPoint: BN$1): QuoteResult;
/**
 * Get swap amount from base to quote
 * @param configState Config state
 * @param currentSqrtPrice Current sqrt price
 * @param amountIn Input amount
 * @returns Swap amount
 */
declare function getSwapAmountFromBaseToQuote(configState: {
    curve: Array<{
        sqrtPrice: BN$1;
        liquidity: BN$1;
    }>;
}, currentSqrtPrice: BN$1, amountIn: BN$1): SwapAmount;
/**
 * Get swap amount from quote to base
 * @param configState Config state
 * @param currentSqrtPrice Current sqrt price
 * @param amountIn Input amount
 * @returns Swap amount
 * @throws Error if not enough liquidity
 */
declare function getSwapAmountFromQuoteToBase(configState: {
    curve: Array<{
        sqrtPrice: BN$1;
        liquidity: BN$1;
    }>;
}, currentSqrtPrice: BN$1, amountIn: BN$1): SwapAmount;
/**
 * Get fee mode
 * @param collectFeeMode Collect fee mode
 * @param tradeDirection Trade direction
 * @param hasReferral Whether referral is used
 * @returns Fee mode
 */
declare function getFeeMode(collectFeeMode: GetFeeMode, tradeDirection: TradeDirection, hasReferral: boolean): FeeMode;
/**
 * Calculate quote for a swap with exact input amount
 * Matches Rust's quote_exact_in function
 * @param virtualPool Virtual pool state
 * @param config Pool config state
 * @param swapBaseForQuote Whether to swap base for quote
 * @param amountIn Input amount
 * @param slippageBps Slippage tolerance in basis points (100 = 1%)
 * @param hasReferral Whether referral is used
 * @param currentPoint Current point
 * @returns Swap quote result
 */
declare function swapQuote(virtualPool: VirtualPool, config: PoolConfig, swapBaseForQuote: boolean, amountIn: BN$1, slippageBps: number, hasReferral: boolean, currentPoint: BN$1): Promise<QuoteResult>;

export { ActivationType, BASE_ADDRESS, BASIS_POINT_MAX, BIN_STEP_BPS_DEFAULT, BIN_STEP_BPS_U128_DEFAULT, type BaseFee, type BaseFeeConfig, type BuildCurveAndCreateConfigByMarketCapParam, type BuildCurveAndCreateConfigParam, type BuildCurveBaseParam, type BuildCurveByMarketCapParam, type BuildCurveGraphAndCreateConfigParam, type BuildCurveGraphParam, type BuildCurveParam, type ClaimCreatorTradingFeeAccounts, type ClaimCreatorTradingFeeParam, type ClaimFeeOperator, type ClaimProtocolFeeAccounts, type ClaimTradingFeeAccounts, type ClaimTradingFeeParam, type CloseClaimFeeOperatorAccounts, CollectFeeMode, type Config, type ConfigParameters, type CreateClaimFeeOperatorAccounts, type CreateConfigAccounts, type CreateConfigParam, type CreateDammV1MigrationMetadataParam, type CreateDammV2MigrationMetadataParam, type CreateLockerAccounts, type CreateLockerParam, type CreatePartnerMetadata, type CreatePartnerMetadataParam, type CreatePartnerMetadataParameters, type CreatePoolAndBuyParam, type CreatePoolParam, type CreateVirtualPoolMetadata, type CreateVirtualPoolMetadataParam, type CreateVirtualPoolMetadataParameters, CreatorService, type CreatorWithdrawSurplusAccounts, type CreatorWithdrawSurplusParam, DAMM_V1_PROGRAM_ID, DAMM_V2_PROGRAM_ID, DYNAMIC_BONDING_CURVE_PROGRAM_ID, DYNAMIC_FEE_DECAY_PERIOD_DEFAULT, DYNAMIC_FEE_FILTER_PERIOD_DEFAULT, DYNAMIC_FEE_REDUCTION_FACTOR_DEFAULT, type DammLpTokenParam, DynamicBondingCurveClient, DynamicBondingCurveProgram, type DynamicFeeConfig, type DynamicFeeParameters, FEE_DENOMINATOR, type FeeMode, type FeeOnAmountResult, type FeeResult, FeeSchedulerMode, type FeeSchedulerParameters, GetFeeMode, type InitializePoolBaseParam, type InitializePoolParameters, type InitializeVirtualPoolWithSplTokenAccounts, type InitializeVirtualPoolWithToken2022Accounts, LOCKER_PROGRAM_ID, type LiquidityDistributionParameters, type LockEscrow, type LockedVestingParameters, MAX_CURVE_POINT, MAX_FEE_NUMERATOR, MAX_PRICE_CHANGE_BPS_DEFAULT, MAX_SQRT_PRICE, MAX_SWALLOW_PERCENTAGE, METAPLEX_PROGRAM_ID, MIN_SQRT_PRICE, type MeteoraDammMigrationMetadata, type MeteoraDammV2MigrationMetadata, type MigrateMeteoraDammAccounts, type MigrateMeteoraDammClaimLpTokenAccounts, type MigrateMeteoraDammLockLpTokenAccounts, type MigrateToDammV1Param, type MigrateToDammV2Param, type MigrateToDammV2Response, type MigrationDammV2Accounts, type MigrationDammV2CreateMetadataAccounts, MigrationFeeOption, type MigrationMeteoraDammCreateMetadataAccounts, MigrationOption, MigrationService, OFFSET, ONE_Q64, PARTNER_SURPLUS_SHARE, type PartnerMetadata, PartnerService, type PartnerWithdrawSurplusAccounts, type PartnerWithdrawSurplusParam, type PoolConfig, type PoolFeeParameters, type PoolFees, type PoolFeesConfig, type PoolMetrics, PoolService, type PrepareSwapParams, type QuoteResult, RESOLUTION, Rounding, SWAP_BUFFER_PERCENTAGE, type SwapAccounts, type SwapAmount, type SwapParam, type SwapParameters, type SwapQuoteParam, type SwapResult, TokenDecimal, TokenType, TradeDirection, U64_MAX, VAULT_PROGRAM_ID, type VirtualPool, type VirtualPoolMetadata, type VolatilityTracker, type WithdrawLeftoverAccounts, type WithdrawLeftoverParam, bpsToFeeNumerator, buildCurve, buildCurveByMarketCap, buildCurveGraph, calculateMigrationQuoteThreshold, calculatePercentageSupplyOnMigration, convertDecimalToBN, createDammV1Program, createDammV2Program, createDbcProgram, createInitializePermissionlessDynamicVaultIx, createLockEscrowIx, createProgramAccountFilter, createVaultProgram, deriveBaseKeyForLocker, deriveDammV1EventAuthority, deriveDammV1LockEscrowAddress, deriveDammV1LpMintAddress, deriveDammV1MigrationMetadataAddress, deriveDammV1PoolAddress, deriveDammV1PoolAuthority, deriveDammV1ProtocolFeeAddress, deriveDammV1VaultLPAddress, deriveDammV2EventAuthority, deriveDammV2LockEscrowAddress, deriveDammV2MigrationMetadataAddress, deriveDammV2PoolAddress, deriveDammV2PoolAuthority, deriveDammV2TokenVaultAddress, deriveDbcPoolAddress, deriveDbcPoolAuthority, deriveDbcPoolMetadata, deriveDbcTokenVaultAddress, deriveEscrow, deriveLockerEventAuthority, deriveMintMetadata, derivePartnerMetadata, derivePositionAddress, derivePositionNftAccount, deriveTokenVaultKey, deriveVaultAddress, deriveVaultLpMintAddress, deriveVaultPdas, feeNumeratorToBps, findAssociatedTokenAddress, getAccountCreationTimestamp, getAccountCreationTimestamps, getAccountData, getBaseFeeNumerator, getBaseFeeParams, getBaseTokenForSwap, getCurrentBaseFeeNumerator, getDeltaAmountBase, getDeltaAmountBaseUnsigned, getDeltaAmountQuoteUnsigned, getDynamicFeeParams, getFeeInPeriod, getFeeMode, getFeeOnAmount, getFirstCurve, getFirstKey, getInitialLiquidityFromDeltaBase, getInitialLiquidityFromDeltaQuote, getInitializeAmounts, getLiquidity, getMigrationBaseToken, getMigrationThresholdPrice, getMinBaseFeeBps, getNextSqrtPriceFromAmountBaseRoundingUp, getNextSqrtPriceFromAmountQuoteRoundingDown, getNextSqrtPriceFromInput, getOrCreateATAInstruction, getSecondKey, getSqrtPriceFromMarketCap, getSqrtPriceFromPrice, getSwapAmountFromBaseToQuote, getSwapAmountFromQuoteToBase, getSwapAmountWithBuffer, getSwapResult, getTokenDecimals, getTokenProgram, getTotalSupplyFromCurve, getTotalTokenSupply, getTotalVestingAmount, getVariableFee, isDefaultLockedVesting, isNativeSol, swapQuote, unwrapSOLInstruction, validateActivationType, validateBalance, validateBaseTokenType, validateCollectFeeMode, validateConfigParameters, validateCurve, validateLPPercentages, validateMigrationAndTokenType, validateMigrationFeeOption, validatePoolFees, validateSwapAmount, validateTokenDecimals, validateTokenSupply, wrapSOLInstruction };
